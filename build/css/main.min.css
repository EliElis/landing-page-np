/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figcaption,figure{display:block}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}main{display:block}pre{font:1em monospace,monospace}a{background:0 0;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}code,kbd,samp{font:1em monospace,monospace}dfn{font-style:italic}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font:100%/1.15 sans-serif;margin:0}button{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}details{display:block}summary{display:list-item}menu{display:block}canvas{display:inline-block}template{display:none}[hidden]{display:none}@font-face{font-family:'Helvetica Neue';src:url(../fonts/HelveticaNeue/HelveticaNeue-Bold.eot);src:local("HelveticaNeueCyr-Medium"),url(../fonts/HelveticaNeue/HelveticaNeue-Bold.eot?#iefix) format("embedded-opentype"),url(../fonts/HelveticaNeue/HelveticaNeue-Bold.woff) format("woff"),url(../fonts/HelveticaNeue/HelveticaNeue-Bold.ttf) format("truetype");font-weight:800;font-style:normal;font-display:swap}@font-face{font-family:'Helvetica Neue';src:url(../fonts/HelveticaNeue/HelveticaNeue.eot);src:local("HelveticaNeueCyr-Medium"),url(../fonts/HelveticaNeue/HelveticaNeue.eot?#iefix) format("embedded-opentype"),url(../fonts/HelveticaNeue/HelveticaNeue.woff) format("woff"),url(../fonts/HelveticaNeue/HelveticaNeue.ttf) format("truetype");font-weight:400;font-style:normal;font-display:swap}*{box-sizing:border-box}body{position:relative;-webkit-overflow-scrolling:touch;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;width:100%;font-family:"Helvetica Neue",Arial,sans-serif;font-weight:400;color:#242424}body{font-size:18px}@media screen and (min-width:1680px){body{font-size:calc(18px + 48 * ((100vw - 1680px)/ 3320))}}@media screen and (min-width:5000px){body{font-size:66px}}.container{padding-left:6.11111em;padding-right:6.11111em}.container-left{width:62.6%;padding-left:3.88889em}.container-right{width:37.4%;padding-right:3.88889em}.title{padding-top:16vh;padding-bottom:4vh;text-align:center;max-width:80%;margin:0 auto}.subtitle{font-size:1.33333em;line-height:1.5;text-align:center;width:85%;margin:0 auto;padding-bottom:8vh}.h4,h1,h2,h3,h4{line-height:1;margin:0;font-weight:800}h1{font-size:5.55556em}h3{font-size:2em}.h4,h4{font-size:1.33333em}a,button,input[type=submit]{cursor:pointer}.placeholder{height:100vh}@media screen and (max-width:1680px){body{font-size:18px}h1{font-size:105px}.container-left{padding-left:71px}.container-right{padding-right:74px}.container{padding-left:110px;padding-right:110px}.title{padding:107px 0 29px;max-width:731px}.subtitle{padding-bottom:63px;width:100%;max-width:1012px}}@media screen and (max-width:1250px){h1{font-size:72px}.container-left{width:55%}.container-right{width:45%}}@media screen and (max-width:1024px){body{font-size:16px}.container-left,.container-right{width:100%}.container,.container-left{padding-left:50px;padding-right:50px}}@media screen and (max-width:768px){body{font-size:14px}h1{font-size:60px}h3{font-size:24px}.h4,h4{font-size:16px}.title{max-width:75%;padding:75px 0 19px}.subtitle{font-size:16px}}@media screen and (max-width:576px){.container,.container-left,.container-right{padding-left:22px;padding-right:24px}h1{font-size:2.33333em}}@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}.header{display:flex;position:absolute;z-index:5;top:0;left:0;right:0;padding-top:4.5vh}.header__logo{display:flex;align-items:center;margin-right:40px}.header__logo .logo-red{display:none}.header__logo img{width:100%}.header__nav{display:flex}.header__nav__ul{display:flex;align-items:center;list-style:none;padding:0 20px 0 0;margin:0 auto}.header__nav__item{margin-right:.27778em;margin-left:.27778em;flex-shrink:0}.header__nav__link{display:inline-flex;flex-direction:column;color:#fff;text-decoration:none;font-size:.77778em;line-height:1.2;padding-right:.27778em;padding-left:.27778em;font-weight:400;transition:font-weight .4s}.no-touch .header__nav__link:hover{font-weight:800}.no-touch .header__nav__link:after{content:attr(data-text)/"";height:0;visibility:hidden;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;font-weight:800}.header__right{display:flex;align-items:center}.header__lang,.header__pdf,.header__phone{display:inline-flex;align-items:center;font-size:.77778em;padding-right:.27778em;padding-left:.27778em;line-height:1.2;font-weight:800;color:#ed1c24;text-decoration:none}.header__pdf{margin-left:2.5em;margin-right:1.11111em}.header__pdf span{border-bottom:1px solid transparent;transition:border-bottom-color .4s}.header__pdf svg{width:.88889em;height:1.11111em;margin-right:.66667em;fill:#ed1c24}.no-touch .header__pdf:hover span{border-bottom-color:#ed1c24}.header__phone svg{fill:#ed1c24;width:.88889em;height:.88889em;margin-right:.66667em}.header__lang{margin-left:auto}.header.fixed{background:#fff;position:fixed;opacity:1;transition:opacity .4s;border-bottom:2px solid #f5f5f5;padding-top:1.38889em;padding-bottom:.83333em}.header.fixed .header__logo img{display:none}.header.fixed .header__logo img.logo-red{display:block}.header.fixed .header__nav__link{color:#242424}.header.opacity{opacity:0}@media screen and (max-width:1680px){.header{padding-top:38px}.header__logo{max-width:250px}.header__nav__ul{margin-left:0}.header__nav__item{margin:0 5px}.header__nav__link{padding:0 5px}.header__pdf{margin-left:45px;margin-right:20px}.header__pdf svg{width:16px;height:20px}.header__phone svg{width:16px;height:16px}.header.fixed{padding-top:30px;padding-bottom:15px}}@media screen and (max-width:1250px){.header.fixed{padding-top:20px}.header__logo{max-width:200px}.header__nav__ul{display:none}}@media screen and (max-width:1024px){.header__logo{min-width:150px}.header__pdf{display:none}.header__lang,.header__phone{font-size:16px;color:#fff}.header__lang svg,.header__phone svg{fill:#fff}.header.fixed .header__logo{display:none}.header.fixed .header__right{padding-top:0}.header.fixed .header__lang,.header.fixed .header__phone{color:#ed1c24}.header.fixed .header__lang svg,.header.fixed .header__phone svg{fill:#ed1c24}}@media screen and (max-width:576px){.header{flex-wrap:wrap}.header__right{padding-top:30px}.header__logo{max-width:270px;width:100%}}.intro{display:flex;flex-wrap:wrap;height:100vh;position:relative;min-height:36.11111em}.intro__info{position:relative;display:flex;flex-direction:column;justify-content:flex-end;padding-bottom:25vh;z-index:1;color:#fff}.intro__info__video{background:url(../video/video_thumbnail.jpg) no-repeat 0 0/cover;position:absolute;overflow:hidden;z-index:-1;top:0;left:0;bottom:0;right:0}.intro__info__video:after{background:rgba(236,32,40,.87);content:'';display:block;position:absolute;top:0;left:0;bottom:0;right:0;z-index:1}.intro__info__video video{position:absolute;top:0;bottom:0;height:100%;left:50%;transform:translateX(-50%)}.intro__subtitle{padding-top:5vh;margin:0;font-size:1.33333em;line-height:1.2}.intro__form{display:flex;align-items:flex-end;padding-bottom:10vh;padding-left:2.77778em;padding-right:8.11111em}.arrow-next{padding:.55556em;position:absolute;z-index:10;left:3.33333em;bottom:1.66667em}.arrow-next svg{width:1.05556em;height:.61111em}@media screen and (max-width:1680px){.intro__info{padding-bottom:128px}.intro__form{padding:0 146px 51px 50px}.intro__subtitle{padding-top:33px}.arrow-next{padding:10px;left:65px;bottom:18px}.arrow-next svg{width:17px;height:10px}}@media screen and (max-width:1024px){.intro__form{display:none}}@media screen and (max-width:768px){.intro__info__video video{display:none}}input{-webkit-appearance:none;outline:0;box-shadow:none;border-radius:0}input:focus{outline:0}@-webkit-keyframes autofill{to{color:inherit;background:#fff}}input:-webkit-autofill{-webkit-animation-name:autofill;-webkit-animation-fill-mode:both}button,input,optgroup,select,textarea{font-family:"Helvetica Neue",Arial,sans-serif}.form{display:flex;flex-direction:column;align-items:flex-start;width:90%}.form__group{position:relative;width:100%}.form__title{padding-bottom:5vh}.form__label{display:flex;margin-bottom:.27778em;font-size:.77778em;line-height:1.2}.form__input{background:0 0;display:flex;width:100%;font-size:.77778em;line-height:1.2;padding-top:.55556em;padding-bottom:.55556em;margin-bottom:1.66667em;border:0;border-bottom:2px solid #cdcdcd}.form__input::-webkit-input-placeholder{color:#cdcdcd}.form__input::-moz-placeholder{color:#cdcdcd}.form__input:-ms-input-placeholder{color:#cdcdcd}.form__input:-moz-placeholder{color:#cdcdcd}.form__btn{background:#ed1c24;padding:.83333em 1.66667em;display:inline-flex;align-items:center;width:auto;min-height:47px;color:#fff;border:0;border-radius:2%;outline:0;box-shadow:none;font-weight:800;line-height:1;margin-top:.55556em}.form .error-message{display:none;position:absolute;bottom:.55556em;left:0;color:#ed1c24;opacity:0;font-size:.66667em}.form .error-message.visible{display:block;opacity:1;-webkit-animation:fadeIn .4s;animation:fadeIn .4s}@media screen and (max-width:1680px){.form{max-width:314px;width:100%}.form__title{padding-bottom:40px}.form__label{margin-bottom:0}.form__input{padding:6px 0;margin-bottom:25px;border-bottom-width:1px}.form__btn{border-radius:3px;height:47px;padding:10px 31px}}.slider{display:flex;overflow:hidden}.slider__left{background:#fff;position:relative;display:flex;flex-direction:column;align-items:flex-end;padding-top:4vh;padding-bottom:4vh;z-index:1}.slider__left:before{background:#ed1c24;content:'';display:block;position:absolute;top:0;bottom:0;left:0;width:90%;z-index:-1}.slider__right{padding-top:4vh}.slider__right__inner{position:relative;height:15.55556em}.slider__right__arrows{display:none}.slider__content{background:#fff;display:flex;flex-direction:column;justify-content:center;position:absolute;width:90%;height:100%;top:0;bottom:0;left:0;opacity:0;padding-left:2.77778em;transition:opacity .4s}.slider__content.active{opacity:1;transition:opacity .8s}.slider__content.prev-text{opacity:0}.slider__text{margin-bottom:0;margin-top:2em}.slider__arrows{margin-right:11%;padding-right:2.22222em;padding-top:2.22222em}.slider__arrows__next,.slider__arrows__prev{display:inline-flex;align-items:center;justify-content:center;width:2em}.slider__arrows__next svg,.slider__arrows__prev svg{position:relative;left:0;transition:left .4s;height:.88889em}.slider__arrows__prev{margin-right:1.66667em}.no-touch .slider__arrows__prev:hover svg{left:-10px}.no-touch .slider__arrows__next:hover svg{left:10px}.slider__bullets{display:flex;padding-top:2.22222em;padding-left:2.77778em}.slider__bullets__item{display:flex;position:relative;margin-right:2.5em}.slider__bullets__item:last-child{margin-right:0}.slider__bullets__item .filled,.slider__bullets__item .lines{flex-shrink:0;height:2em;width:auto;fill:#ed1c24;transition:opacity .2s}.slider__bullets__item .lines{position:absolute;left:0;top:0;bottom:0;right:0;opacity:0}.slider__bullets__item.active .filled{opacity:0}.slider__bullets__item.active .lines{opacity:1}.slider .slide{display:none}.slider .slide__img{display:flex;align-items:center;position:relative;-webkit-animation-delay:.3s;animation-delay:.3s;-webkit-animation:nextSlide .8s;animation:nextSlide .8s;height:15.55556em}.slider .slide__img img{max-height:15.55556em;height:100%}.slider .slide.prev-slide{position:absolute;top:0;display:block;padding-top:4vh}.slider .slide.prev-slide .slide__img{-webkit-animation:prevSlide .8s;animation:prevSlide .8s;right:100vw;opacity:1}.slider .slide.active{display:block}.slider .slide.active .slide__img{right:0}@-webkit-keyframes prevSlide{from{right:0}to{right:100vw}}@keyframes prevSlide{from{right:0}to{right:100vw}}@-webkit-keyframes nextSlide{from{right:100vw}to{right:0}}@keyframes nextSlide{from{right:100vw}to{right:0}}@media screen and (max-width:1680px){.slider__left{padding-top:35px;padding-bottom:27px}.slider__left:before{width:calc(100% - 80px)}.slider__right{padding-top:35px}.slider__right__inner{height:281px}.slider__content{width:100%;padding-left:50px;max-width:437px}.slider .slide__img{height:281px}.slider .slide.prev-slide{padding-top:35px}.slider__arrows{margin-right:0;padding:40px 125px 0 0}.slider__arrows__next svg,.slider__arrows__prev svg{height:19px}.slider__bullets{padding:40px 0 0 50px}.slider__bullets__item{margin-right:45px}.slider__bullets__item svg{height:31px}}@media screen and (max-width:1024px){.slider__bullets{display:none}.slider__right__inner{height:250px}.slider__content{padding-left:0}.slider .slide__img{height:250px}}@media screen and (max-width:768px){.slider__left{width:50%;padding-right:30px}.slider__arrows{padding:30px 70px 0 0}.slider__right{padding-right:50px}.slider__right__inner{height:170px}.slider .slide__img{height:170px}.slider .slide__img img{height:100%}}@media screen and (max-width:576px){.slider{flex-wrap:wrap}.slider__left{width:100%}.slider__arrows{display:none}.slider__right{padding:40px 20px}.slider__right__inner{height:120px;position:relative}.slider__right__arrows{display:flex;align-items:center;justify-content:center;position:absolute;top:50%;transform:translateY(-50%);margin:0;width:30px}.slider__right__arrows svg{height:16px;stroke:#242424;fill:#242424}.slider__right__arrows__next{right:0}.slider__right__arrows__prev{left:0}.slider__left{align-items:center}.slider__left:before{width:50%}.slider__content{padding:0 40px;justify-content:flex-start;text-align:center;left:auto;opacity:1;width:100%;max-width:unset;right:-100vw}.slider__content.active{-webkit-animation:nextSlide .4s;animation:nextSlide .4s;right:0}.slider__content.prev-text{-webkit-animation:prevSlide .4s;animation:prevSlide .4s;right:100vw}.slider__text{margin:16px 0 0}.slider .slide{width:100%}.slider .slide__img{max-height:unset;min-width:154px;width:60%;height:48vw;margin:0 auto}.slider .slide__img img{width:100%;height:auto;max-height:unset}.slider .slide.prev-slide{padding:35px 24px 27px 22px}@-webkit-keyframes nextSlide{from{right:-100vw}to{right:0}}@keyframes nextSlide{from{right:-100vw}to{right:0}}}.success-popup{background:rgba(255,255,255,.95);display:none;opacity:0;padding-top:5%;padding-bottom:6%}.success-popup__cross{position:absolute;top:2.05556em;right:4.05556em;cursor:pointer}.success-popup__cross svg{width:2em}.success-popup__inner{background:#fff;display:flex;flex-direction:column;align-items:center;justify-content:center;width:30%;padding-left:1.55556em;padding-right:3em}.success-popup__inner svg{width:3em}.success-popup__subtitle{font-size:1.11111em;margin-top:1.38889em;margin-bottom:2.77778em}.success-popup.visible{position:fixed;top:0;left:0;right:0;width:100%;min-height:100vh;display:flex;-webkit-animation:center;animation:center;justify-content:center;opacity:1;z-index:10}@media screen and (max-width:1680px){.success-popup{padding-top:48px;padding-bottom:55px}.success-popup__cross{top:37px;right:74px}.success-popup__cross svg{width:40px}.success-popup__inner{max-width:410px;max-height:547px;width:100%}.success-popup__subtitle{margin-top:14px;margin-bottom:36px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtc2Nzcy9zYXNzL25vcm1hbGl6ZS9fbm9ybWFsaXplLW1peGluLnNjc3MiLCJtYWluLmNzcyIsImhlbHBlcnMvX2ZvbnRzLnNjc3MiLCJfZ2VuZXJhbC5zY3NzIiwiaGVscGVycy9fbWl4aW5zLnNjc3MiLCJfaGVhZGVyLnNjc3MiLCJfaW50cm8uc2NzcyIsIl9mb3JtLnNjc3MiLCJfc2xpZGVyLnNjc3MiLCJoZWxwZXJzL192YXJpYWJsZXMuc2NzcyIsIl9wb3B1cC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJDRSxpRUNoQ0YsS0Q0RGtDLFlBQUEsS0FDSSxxQkFBTyxLQUt6Qyx5QkFBQSxLQWVBLEtDaEVGLE9BQVEsRUR5RU4sUUNqRUosTUFDQSxPQUNBLE9Eb0VJLElDbEVKLFFENkVRLFFBQUEsTUNwRVIsR0R3Sk0sVUFBQSxJQ3RKSixPQUFRLE1BQU8sRUFVakIsV0RpS0ksT0FDRSxRQUFBLE1BS0YsT0M3SkYsT0FBUSxJQUFJLEtBUWQsR0Q2S0ksV0FBQSxZQUNxQyxPQUFBLEVBQ25CLFNBQU8sUUFhekIsS0FDRSxRQUFBLE1DdktOLElBQ0UsS0FBTSxJQUFJLFNBQVMsQ0FBRSxVQWF2QixFRGlMSSxXQUFBLElBRUUsNkJBQW9CLFFDcEsxQixZRHFMSSxjQUFBLEtDbExGLGdCQUFpQixVRHFMc0Isd0JBQUEsVUFBQSxPQUNuQyxnQkFBYyxVQUFBLE9DM0twQixFRHNMSSxPQ3BMRixZQUFhLFFBT2YsRUFDQSxPRHlMSSxZQUFBLE9DaExKLEtBQ0EsSUFDQSxLRDJMTSxLQUFBLElBQUEsU0FBa0IsQ0FBQSxVQWNwQixJQzlMRixXQUFZLE9BT2QsS0RtTUksV0FBQSxLQ2pNRixNQUFPLEtBT1QsTUFDRSxVQURJLElBU04sSUFDQSxJRDJNSSxVQUFBLElDek1GLFlBQWEsRUQ0TVgsU0FBQSxTQzFNRixlQUFnQixTRCtNZCxJQzNNRixPQUFRLE9BR1YsSUQ2TU0sSUFBQSxNQ2xNTixNQUNBLE1EZ05JLFFBQUEsYUFTQSxzQkNoTkYsUUFBUyxLRGlORSxPQUFBLEVDek1iLElEbU5JLGFBQUEsS0FPQSxlQ2pORixTQUFVLE9BV1osT0FDQSxNQUNBLFNBQ0EsT0FDQSxTQUNFLEtBQU0sSUFBSSxDQUFDLEtBQUssV0FJaEIsT0FBUSxFQVFWLE9BQ0UsU0FBVSxRQVFaLE9Ec05JLE9Dbk5GLGVBREksS0FZTixhQUNBLGNBSkEsT0FFQSxtQkR5TjRCLG1CQUFBLE9Bc0J4QixnQ0MxTkosK0JBQ0EsZ0NBSEEseUJEZ09JLGFBQUEsS0FDRSxRQUFBLEVDeE5OLDZCQUNBLDRCQUNBLDZCQUhBLHNCQUlFLFFBREksSUFBQSxPQUFBLFdBUU4sTUQ0Tk0sU0FBVSxRQ25OaEIsZ0JBQ0EsYUFDRSxXQURJLFdENk5BLFFBQUEsRUFRRix5Q0N6TkoseUNBQ0UsT0FBUSxLQVFWLGNEaU9JLG1CQUFBLFVDOU5GLGVBREksS0QyT0YsNENDbE9KLHlDQUNFLG1CQUFvQixLQVF0Qiw2QkQ4UEksbUJBQUEsT0MzUEYsS0FESSxRQVNOLFNBQUEsUUFBQSxNQUFBLE1BQUEsT0FXQSxPQ2haQSxXQUFBLFdBRUUsUUFBQSxNQUtBLFVBQUEsS0FFQSxRQUFBLEVDckJGLE1BQUEsUUZ1YUUsWUFBYSxPQVNmLFNHL1pJLFFBQUEsYUhrYUYsZUdoYUksU0h3YU4sU0d4YkUsU0FBQSxLRDRCRixRQUNFLFFBQUEsTUY4YUYsUUVyYUUsUUFBQSxVRjZhRixLRXBhRSxRQUFTLE1GK2FYLE9BQ0UsUUFBUyxhRXhaWCxTQUNFLFFBQUEsS0Z5YUYsU0V0WkUsUUFBQSxLRjBaRixXQUNFLFlFdFpFLGlCRnVaRixJRXRaRSxtREZ1WkYsSUV0WkUsZ0NBQ0QsQ0FBQSwwREFBQSwyQkFBQSxDQUFBLG9EQUFBLGNBQUEsQ0FBQSxtREFBQSxtQkZzWkQsWUFBYSxJRW5aZixXQUFBLE9BQ0UsYUFBQSxLRnVaRixXRWpaRSxZQUFBLGlCRm1aQSxJRWxaRSw4Q0ZtWkYsSUFBSyxnQ0FBZ0MsQ0FBRSxxREFBdUQsMkJBQTJCLENBQUUsK0NBQWlELGNBQWMsQ0FBRSw4Q0FBZ0QsbUJFL1k5TyxZQUFBLElBQ0UsV0FBQSxPRmlaQSxhRWhaRSxLRm1aSixFQUNFLFdFOVlFLFdBS0osS0FDRSxTQUFBLFNGNllBLDJCRTVZaUIsTUFFakIscUJBQUEsS0Y0WUEseUJFM1lpQixLQUdqQixNQUFBLEtGMFlBLFlFellFLGdCQUFlLENBQUEsS0FBQSxDQUFBLFdBR2pCLFlBQUEsSUZ3WUEsTUV2WUUsUUYwWUosS0VsWUUsVUFBQSxLQUtGLHFDQUNFLEtBQ0UsVUFBQSw0Q0ZxWUoscUNFN1hBLEtBQ0UsVUFBQSxNRmtZRixXRW5ZQSxhQUFBLFVBQ0UsY0FBQSxVRnVZRixnQkFDRSxNQUFPLE1JL2lCVCxhQUFBLFVKbWpCQSxpQkkvaUJFLE1BQU0sTUFDTixjQUFPLFVKbWpCVCxPQUNFLFlJL2lCRSxLSmdqQkYsZUkvaUJFLElKZ2pCRixXSS9pQkUsT0pnakJGLFVJbmpCQyxJSm9qQkQsT0k5aUJJLEVBQUEsS0ppakJOLFVBQ0UsVUl6aUJFLFVKMGlCRixZSXhpQkUsSUp5aUJGLFdJeGlCSSxPSnlpQkosTUl4aUJJLElKeWlCSixPSXhpQkksRUFBQSxLSnlpQkosZUl4aUJJLElKK2lCTixJQUpBLEdBQ0EsR0FDQSxHQUNBLEdBRUUsWUlwaUJJLEVKcWlCSixPSXBpQkksRUpxaUJKLFlJcGlCSSxJSnVpQk4sR0FDRSxVR2psQkEsVUhvbEJGLEdBQ0UsVUlsaUJRLElKc2lCVixJQURBLEdBRUUsVUloaUJRLFVKbWlCVixFQUNBLE9BQ0EsbUJBQ0UsT0luaUJRLFFKc2lCVixhSTFoQkUsT0FBQSxNSjhoQkYscUNBQ0UsS0d4bUJBLFVBQUEsS0g0bUJBLEdJMWhCRSxVQUFBLE1KOGhCRixnQkkzaEJDLGFBQUEsS0oraEJELGlCQUNFLGNHcm5CRixLSHduQkEsV0luaEJFLGFBQUEsTUpxaEJBLGNJbGhCTSxNSnFoQlIsT0c3bkJBLFFBQUEsTUFBQSxFQUF1QyxLQUF2QyxVQUFBLE1DSEYsVUErSEksZUFBZSxLQUNmLE1BQUEsS0FDQSxVQUFVLFFKMmdCZCxxQ0FDRSxHQUNFLFVJcGdCTSxLSnVnQlIsZ0JBQ0UsTUk5Zk0sSUFVUixpQkE5SkYsTUFBQSxLSjBwQkEscUNBQ0UsS0FDRSxVSXBmRSxLSndmSixnQkFEQSxpQkFFRSxNSWhmRSxLSm9mSixXQURBLGdCQUVFLGFJN2VDLEtKOGVELGNJNWVlLE1KZ2ZuQixvQ0l2ZUUsS0FwTUYsVUFBQSxLSmdyQkUsR0lwZUksVUFBQSxLSndlSixHQUNFLFVJbGVFLEtKc2VKLElBREEsR0FFRSxVSWhlRSxLSm1lSixPQUNFLFVJM2RNLElBbk9WLFFBQUEsS0FBQSxFQUFBLEtKa3NCRSxVQUNFLFVJbnNCSixNSnVzQkEsb0NBR0UsV0FGQSxnQkFDQSxpQkFFRSxhSWpkRSxLSmtkRixjSWhkQSxLQzNQRixHQUNBLFVBQUEsV0xrdEJGLDBCQUNFLEtLNXNCRSxRQUFBLEVMZ3RCRixHSzVzQkUsUUFBQSxHTGl0Qkosa0JBQ0UsS0FDRSxRSzVzQlEsRUwrc0JWLEdBQ0UsUUs1c0JFLEdMZ3RCTixRQUNFLFFLM3NCTSxLTDRzQk4sU0szc0JNLFNMNHNCTixRSzNzQk0sRUw0c0JOLElBQUssRUFDTCxLSzNzQk0sRUw0c0JOLE1LM3NCTSxFTDRzQk4sWUszc0JNLE1MOHNCUixjQUNFLFFLenNCTSxLTDBzQk4sWUt6c0JNLE9MMHNCTixhS3pzQk0sS0w0c0JSLHdCQUNFLFFLcnNCRSxLTHdzQkosa0JLbHNCRSxNQUFBLEtMc3NCRixhQUNFLFFHOXZCQSxLRWdFRixpQkFDRSxRQUFBLEtBQ0EsWUFBVyxPRmxFWCxXQUFBLEtBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxLSHl3QkYsbUJLenNCQSxhQUFBLFNMMnNCRSxZRzN3QkEsU0g0d0JBLFlHNXdCQSxFSCt3QkYsbUJBQ0UsUUs1ckJJLFlBR0YsZUFBQSxPTDJyQkYsTUsxckJJLEtBR0YsZ0JBQUEsS0x5ckJGLFVLeHJCSSxTQUdKLFlBQUEsSUx1ckJBLGNLdHJCZSxTTHVyQmYsYUt0ckJZLFNMdXJCWixZS3RyQkUsSUx1ckJGLFdLMXJCQSxZQUFBLElMNnJCRixtQ0tqckJBLFlBQUEsSUxxckJBLG1DSzdxQkEsUUFBQSxlQUFBLENBQUEsR0FHTyxPQUFBLEVMNnFCTCxXSzNxQlEsT0w0cUJSLFNBQVUsT012eUJaLG9CQUFBLEtBQ0UsaUJBQUEsS0FDQSxnQkFBYSxLQUNiLFlBQUEsS0FDQSxlQUFnQixLQUpsQixZQUFBLElBV0EsZUFDRSxRQUFBLEtOc3lCQSxZTXJ5QkUsT04weUJKLGNNcnlCQSxhTm95QkEsZUFFRSxRQUFTLFlNanlCWCxZQUFBLE9BQ0UsVUFBQSxTTm15QkEsY0FBZSxTTWh5QmpCLGFBQUEsU0FDRSxZQUFhLElBQ2IsWUFBQSxJQUNBLE1BQUEsUUFDQSxnQkFBVSxLTm95QlosYU03eEJFLFlBQUEsTU4reEJBLGFNOXhCRSxVTml5Qkosa0JBQ0UsY0d0MEJBLElBQUEsTUFBdUMsWUh1MEJ2QyxXTTV4QkUsb0JBQWdCLElOK3hCcEIsaUJBQ0UsTUczMEJBLFNINDBCQSxPTTF4QkUsVU4yeEJGLGFNMXhCRSxTTjJ4QkYsS0c5MEJBLFFIaTFCRixrQ0FDRSxvQk0xeEJFLFFONnhCSixtQkFDRSxLTXZ4QkksUU53eEJKLE1NenlCQyxTTjB5QkQsT01yeEJJLFNOc3hCSixhTTN5QkMsU044eUJILGNBQ0UsWU1oeEJFLEtObXhCSixjQUNFLFdNaHhCRSxLTml4QkYsU01oeEJFLE1OaXhCRixRTWh4QkUsRU5peEJGLFdNaHhCRSxRQUFhLElOaXhCZixjTWh4QkUsSUFBZ0IsTUFBQSxRTml4QmxCLFlNaHhCRSxVTml4QkYsZU1oeEJnQixTTm14QmxCLGdDQUNFLFFHMzJCQSxLSDgyQkYseUNBQ0UsUU05d0JFLE1OaXhCSixpQ0FDRSxNTTl3QkUsUU5peEJKLGdCQUNFLFFNN3dCSSxFTmd4Qk4scUNNMXdCQSxRQUNFLFlBQUEsS044d0JBLGNBQ0UsVU0xd0JFLE1ONndCSixpQkFDRSxZTXR3QkUsRU55d0JKLG1CQUNFLE9NcHdCRSxFQUFBLElOdXdCSixtQk85NEJGLFFBQUEsRUFBQSxJQUlFLGFBQ0UsWUFBQSxLQUNBLGFBQWEsS1BpNUJmLGlCTzc0QkUsTUFBQSxLQUNBLE9BQUEsS1BpNUJGLG1CQUNFLE1PNzRCRSxLUDg0QkYsT083NEJFLEtQZzVCSixjQUNFLFlPNzRCWSxLUDg0QlosZU83NEJFLE1QaTVCTixxQ0FDRSxjQUNFLFlHdDZCRixLSXFDQSxjQUNFLFVBQUEsTVB1NEJGLGlCT240QkUsUUFBQSxNUHc0QkoscUNBQ0UsY0duN0JBLFVBQUEsTUh1N0JBLGFBQ0UsUU9uNEJFLEtBU0osY1A2M0JBLGVPNTNCRSxVQUFBLEtKL0RGLE1BQUEsS0hrOEJBLGtCQURBLG1CT3ozQkUsS0FBQSxLUDgzQkYsNEJBQ0UsUUd2OEJGLEtIMDhCQSw2QkFDRSxZTzEzQkksRVA4M0JOLDRCQURBLDZCQUVFLE1PbDNCUSxRUHMzQlYsZ0NPdDJCQSxpQ0o5R0EsS0FBQSxTSHk5QkYsb0NBQ0UsUUFDRSxVT3gyQkMsS1AyMkJILGVBQ0UsWUdwNkJGLEtIdTZCQSxjQUNFLFVPaDNCQyxNUGkzQkQsTU8vMUJJLE1QbTJCUixPQUNFLFFPLzFCTSxLUGcyQk4sVU92M0JHLEtQdzNCSCxPTzUxQlEsTVA2MUJSLFNPejNCRyxTUDAzQkgsV08xMUJRLFdQNjFCVixhQUNFLFNPbjFCSSxTUG8xQkosUU9uMUJJLEtQbzFCSixlT24xQkksT1BvMUJKLGdCT24xQkksU1BvMUJKLGVPcDFCSSxLUHExQkosUU9wMUJJLEVQcTFCSixNT3IxQkksS1B3MUJOLG9CQUNFLFdPcDFCTSxrQ0FBWSxVQUFBLEVBQUEsQ0FBQSxDQUFBLE1QcTFCbEIsU08vL0JGLFNQZ2dDRSxTT2oxQkksT1BrMUJKLFFPajFCSSxHUGsxQkosSU9qMUJJLEVQazFCSixLT2oxQkksRVBrMUJKLE9PcGdDRixFUHFnQ0UsTU9oMUJNLEVQbTFCUiwwQkFDRSxXT3pnQ0Ysb0JQMGdDRSxRTzkwQkksR1ArMEJKLFFPM2dDRixNUDRnQ0UsU083MEJNLFNQODBCTixJQUFLLEVPdjBCTCxLQUFBLEVBQ0UsT0FBQSxFUHkwQkYsTU94MEJJLEVBRUYsUUFBQSxFQUpGLDBCQUNFLFNBQUEsU1ArMEJGLElPOTBCSSxFQUVGLE9BQUEsRVA4MEJGLE9PNzBCSSxLUDgwQkosS0FBTSxJTzEwQk4sVUFBQSxpQlA4MEJGLGlCQUNFLFlPMTBCWSxJUDIwQlosT0FBUSxFT2gxQlIsVUFBQSxVQUNFLFlBQUEsSVBvMUJKLGFPNTBCRSxRQUFBLEtQODBCQSxZTzcwQkUsU1A4MEJGLGVPNzBCSSxLUDgwQkosYU83MEJJLFVQODBCSixjT2gxQkcsVVBtMUJMLFlBQ0UsUU96MEJJLFNQMDBCSixTT3owQk0sU1AwMEJOLFFPdjBCRSxHUHcwQkYsS092MEJJLFVQdzBCSixPT3YwQkksVVAwMEJOLGdCQUNFLE1PcmpDRixVUHNqQ0UsT09uMEJNLFNQczBCUixxQ0FDRSxhQUNFLGVPL3pCa0IsTVBrMEJwQixhQUNFLFFPM3pCSSxFQUFBLE1BQUEsS0FBa0IsS0FReEIsaUJBQ0UsWUFBQSxLUHl6QkYsWU9qekJFLFFBQUEsS1BtekJBLEtPbHpCRSxLQXRSTixPQUFBLEtQNGtDRSxnQkFDRSxNTzd5QkUsS1A4eUJGLE9PN3lCRSxNUGl6Qk4scUNBQ0UsYUFDRSxRT3p5QkksTVA2eUJSLG9DTy94QkUsMEJBelRGLFFBQUEsTVA4bENBLE1BQ0UsbUJPaHlCaUIsS1BpeUJqQixRTy94QkUsRVBneUJGLFdPL3hCSSxLUGd5QkosY085eEJJLEVQaXlCTixZQUNFLFFPNXhCTSxFUCt4QlIsNEJBQ0UsR0FDRSxNTzV4QkksUVA2eEJKLFdPNXhCSSxNUGd5QlIsdUJBQ0UsdUJRL21DYSxTUmduQ2IsNEJPenhCTSxLUDR4QlIsT0FDQSxNQUNBLFNBQ0EsT0FDQSxTQUNFLFlPanhCRSxnQkFBQSxDQUFBLEtBQUEsQ0FBQSxXUG94QkosTUFDRSxRT2p4QkksS1BreEJKLGVPanhCYyxPUGt4QmQsWU9qeEJJLFdQa3hCSixNT2p4QkksSVBveEJOLGFBQ0UsU09qeEJNLFNQa3hCTixNQUFPLEtBR1QsYUFDRSxlT2h4Qk0sSVBteEJSLGFBQ0UsUU83d0JJLEtQOHdCSixjTy9vQ0YsU1BncENFLFVPNXdCTSxTUDZ3Qk4sWU81d0JNLElQK3dCUixhQUNFLFdPcnBDRixJUHNwQ0UsUUFBUyxLQUNULE1BQU8sS0FDUCxVTzN3QlEsU1A0d0JSLFlPenBDRixJUDBwQ0UsWU94d0JNLFNQeXdCTixlT3J3QkUsU1Bzd0JGLGNPcndCSSxVUHN3QkosT09yd0JNLEVQc3dCTixjT3B3QkksSUFBQSxNQUFBLFFQdXdCTix3Q0FDRSxNTzF3Qk0sUVA2d0JSLCtCU3JxQ0EsTUFBQSxRVHlxQ0EsbUNTcnFDRSxNQUFBLFFUeXFDRiw4QkFDRSxNRzNxQ0EsUUg4cUNGLFdBQ0UsV0dwbkNBLFFNNUNBLFFBQUEsU0FBQSxVVGtxQ0EsUVNqcUNFLFlUa3FDRixZU2pxQ0UsT1RrcUNGLE1TanFDRSxLVGtxQ0YsV1NqcUNFLEtUa3FDRixNU2pxQ0UsS1RrcUNGLE9HdHJDQSxFSHVyQ0EsY0d2ckNBLEdId3JDQSxRU2pxQ0UsRVRrcUNGLFdTMXFDQyxLVDJxQ0QsWUcvbkNBLElNN0JBLFlBQUEsRVQ4cENBLFdHNXJDQSxTSCtyQ0YscUJBQ0UsUVMzcENFLEtUNHBDRixTUzNwQ1EsU1Q0cENSLE9TM3BDRSxTVDRwQ0YsS1MzcENFLEVUNHBDRixNUzNwQ0UsUVQ0cENGLFFTM3BDRSxFVDRwQ0YsVVMzcENFLFNUOHBDSiw2QkFDRSxRUzVwQ0UsTVQ2cENGLFFTNXBDRSxFQUdGLGtCQUFBLE9BQUEsSVQycENBLFVTaHRDRixPQUFBLElUbXRDQSxxQ0FDRSxNQUNFLFVTM3BDRSxNVDRwQ0YsTVM5cENDLEtUaXFDSCxhQUNFLGVTeHBDRSxLVDJwQ0osYUFDRSxjU3ZwQ0UsRVQwcENKLGFBQ0UsUUFBUyxJQUFJLEVBQ2IsY0FBZSxLQUNmLG9CQUFxQixJQUd2QixXQUNFLGNBQWUsSUFDZixPQUFRLEtBQ1IsUUFBUyxLQUFLLE1BSWxCLFFBQ0UsUUFBUyxLQUNULFNBQVUsT0FHWixjQUNFLFdBQVksS0FDWixTQUFVLFNBQ1YsUUFBUyxLQUNULGVBQWdCLE9BQ2hCLFlBQWEsU0FDYixZQUFhLElBQ2IsZUFBZ0IsSUFDaEIsUUFBUyxFQUdYLHFCQUNFLFdBQVksUUFDWixRQUFTLEdBQ1QsUUFBUyxNQUNULFNBQVUsU0FDVixJQUFLLEVBQ0wsT0FBUSxFQUNSLEtBQU0sRUFDTixNQUFPLElBQ1AsUUFBUyxHQUdYLGVBQ0UsWUFBYSxJQUdmLHNCQUNFLFNBQVUsU0FDVixPQUFRLFdBR1YsdUJBQ0UsUUFBUyxLQUdYLGlCQUNFLFdBQVksS0FDWixRQUFTLEtBQ1QsZUFBZ0IsT0FDaEIsZ0JBQWlCLE9BQ2pCLFNBQVUsU0FDVixNQUFPLElBQ1AsT0FBUSxLQUNSLElBQUssRUFDTCxPQUFRLEVBQ1IsS0FBTSxFQUNOLFFBQVMsRUFDVCxhQUFjLFVBQ2QsV0FBWSxRQUFRLElBR3RCLHdCQUNFLFFBQVMsRUFDVCxXQUFZLFFBQVEsSUFHdEIsMkJBQ0UsUUFBUyxFQUdYLGNBQ0UsY0FBZSxFQUNmLFdBQVksSUFHZCxnQkFDRSxhQUFjLElBQ2QsY0FBZSxVQUNmLFlBQWEsVUFJZixzQkFEQSxzQkFFRSxRQUFTLFlBQ1QsWUFBYSxPQUNiLGdCQUFpQixPQUNqQixNQUFPLElBSVQsMEJBREEsMEJBRUUsU0FBVSxTQUNWLEtBQU0sRUFDTixXQUFZLEtBQUssSUFDakIsT0FBUSxTQUdWLHNCQUNFLGFBQWMsVUFHaEIsMENBQ0UsS0FBTSxNQUdSLDBDQUNFLEtBQU0sS0FHUixpQkFDRSxRQUFTLEtBQ1QsWUFBYSxVQUNiLGFBQWMsVUFHaEIsdUJBQ0UsUUFBUyxLQUNULFNBQVUsU0FDVixhQUFjLE1BR2hCLGtDQUNFLGFBQWMsRUFJaEIsK0JBREEsOEJBRUUsWUFBYSxFQUNiLE9BQVEsSUFDUixNQUFPLEtBQ1AsS0FBTSxRQUNOLFdBQVksUUFBUSxJQUd0Qiw4QkFDRSxTQUFVLFNBQ1YsS0FBTSxFQUNOLElBQUssRUFDTCxPQUFRLEVBQ1IsTUFBTyxFQUNQLFFBQVMsRUFHWCxzQ0FDRSxRQUFTLEVBR1gscUNBQ0UsUUFBUyxFQUdYLGVBQ0UsUUFBUyxLQUdYLG9CQUNFLFFBQVMsS0FDVCxZQUFhLE9BQ2IsU0FBVSxTQUNWLHdCQUF5QixJQUN6QixnQkFBaUIsSUFDakIsa0JBQW1CLFVBQVUsSUFDN0IsVUFBVyxVQUFVLElBQ3JCLE9BQVEsV0FHVix3QkFDRSxXQUFZLFdBQ1osT0FBUSxLQUdWLDBCQUNFLFNBQVUsU0FDVixJQUFLLEVBQ0wsUUFBUyxNQUNULFlBQWEsSUFHZixzQ0FDRSxrQkFBbUIsVUFBVSxJQUM3QixVQUFXLFVBQVUsSUFDckIsTUFBTyxNQUNQLFFBQVMsRUFHWCxzQkFDRSxRQUFTLE1BR1gsa0NBQ0UsTUFBTyxFQUdULDZCQUNFLEtBQ0UsTUFBTyxFQUdULEdBQ0UsTUFBTyxPQUlYLHFCQUNFLEtBQ0UsTUFBTyxFQUdULEdBQ0UsTUFBTyxPQUlYLDZCQUNFLEtBQ0UsTUFBTyxNQUdULEdBQ0UsTUFBTyxHQUlYLHFCQUNFLEtBQ0UsTUFBTyxNQUdULEdBQ0UsTUFBTyxHQUlYLHFDQUNFLGNBQ0UsWUFBYSxLQUNiLGVBQWdCLEtBR2xCLHFCQUNFLE1BQU8sa0JBR1QsZUFDRSxZQUFhLEtBR2Ysc0JBQ0UsT0FBUSxNQUdWLGlCQUNFLE1BQU8sS0FDUCxhQUFjLEtBQ2QsVUFBVyxNQUdiLG9CQUNFLE9BQVEsTUFHViwwQkFDRSxZQUFhLEtBR2YsZ0JBQ0UsYUFBYyxFQUNkLFFBQVMsS0FBSyxNQUFNLEVBQUUsRUFHeEIsMEJBQ0EsMEJBQ0UsT0FBUSxLQUdWLGlCQUNFLFFBQVMsS0FBSyxFQUFFLEVBQUUsS0FHcEIsdUJBQ0UsYUFBYyxLQUdoQiwyQkFDRSxPQUFRLE1BSVoscUNBQ0UsaUJBQ0UsUUFBUyxLQUdYLHNCQUNFLE9BQVEsTUFHVixpQkFDRSxhQUFjLEVBR2hCLG9CQUNFLE9BQVEsT0FJWixvQ0FDRSxjQUNFLE1BQU8sSUFDUCxjQUFlLEtBR2pCLGdCQUNFLFFBQVMsS0FBSyxLQUFLLEVBQUUsRUFHdkIsZUFDRSxjQUFlLEtBR2pCLHNCQUNFLE9BQVEsTUFHVixvQkFDRSxPQUFRLE1BR1Ysd0JBQ0UsT0FBUSxNQUlaLG9DQUNFLFFBQ0UsVUFBVyxLQUdiLGNBQ0UsTUFBTyxLQUdULGdCQUNFLFFBQVMsS0FHWCxlQUNFLFFBQVMsS0FBSyxLQUdoQixzQkFDRSxPQUFRLE1BQ1IsU0FBVSxTQUdaLHVCQUNFLFFBQVMsS0FDVCxZQUFhLE9BQ2IsZ0JBQWlCLE9BQ2pCLFNBQVUsU0FDVixJQUFLLElBQ0wsVUFBVyxpQkFDWCxPQUFRLEVBQ1IsTUFBTyxLQUdULDJCQUNFLE9BQVEsS0FDUixPQUFRLFFBQ1IsS0FBTSxRQUdSLDZCQUNFLE1BQU8sRUFHVCw2QkFDRSxLQUFNLEVBR1IsY0FDRSxZQUFhLE9BR2YscUJBQ0UsTUFBTyxJQUdULGlCQUNFLFFBQVMsRUFBRSxLQUNYLGdCQUFpQixXQUNqQixXQUFZLE9BQ1osS0FBTSxLQUNOLFFBQVMsRUFDVCxNQUFPLEtBQ1AsVUFBVyxNQUNYLE1BQU8sT0FHVCx3QkFDRSxrQkFBbUIsVUFBVSxJQUM3QixVQUFXLFVBQVUsSUFDckIsTUFBTyxFQUdULDJCQUNFLGtCQUFtQixVQUFVLElBQzdCLFVBQVcsVUFBVSxJQUNyQixNQUFPLE1BR1QsY0FDRSxPQUFRLEtBQUssRUFBRSxFQUdqQixlQUNFLE1BQU8sS0FHVCxvQkFDRSxXQUFZLE1BQ1osVUFBVyxNQUNYLE1BQU8sSUFDUCxPQUFRLEtBQ1IsT0FBUSxFQUFFLEtBR1osd0JBQ0UsTUFBTyxLQUNQLE9BQVEsS0FDUixXQUFZLE1BR2QsMEJBQ0UsUUFBUyxLQUFLLEtBQUssS0FBSyxLQUc1Qiw2QkFDSSxLQUNFLE1BQU8sT0FHVCxHQUNFLE1BQU8sR0FJYixxQkFDSSxLQUNFLE1BQU8sT0FHVCxHQUNFLE1BQU8sSUFLYixlQUNFLFdBQVksc0JBQ1osUUFBUyxLQUNULFFBQVMsRUFDVCxZQUFhLEdBQ2IsZUFBZ0IsR0FHbEIsc0JBQ0UsU0FBVSxTQUNWLElBQUssVUFDTCxNQUFPLFVBQ1AsT0FBUSxRQUdWLDBCQUNFLE1BQU8sSUFHVCxzQkFDRSxXQUFZLEtBQ1osUUFBUyxLQUNULGVBQWdCLE9BQ2hCLFlBQWEsT0FDYixnQkFBaUIsT0FDakIsTUFBTyxJQUNQLGFBQWMsVUFDZCxjQUFlLElBR2pCLDBCQUNFLE1BQU8sSUFHVCx5QkFDRSxVQUFXLFVBQ1gsV0FBWSxVQUNaLGNBQWUsVUFHakIsdUJBQ0UsU0FBVSxNQUNWLElBQUssRUFDTCxLQUFNLEVBQ04sTUFBTyxFQUNQLE1BQU8sS0FDUCxXQUFZLE1BQ1osUUFBUyxLQUNULGtCQUFtQixPQUNuQixVQUFXLE9BQ1gsZ0JBQWlCLE9BQ2pCLFFBQVMsRUFDVCxRQUFTLEdBR1gscUNBQ0UsZUFDRSxZQUFhLEtBQ2IsZUFBZ0IsS0FHbEIsc0JBQ0UsSUFBSyxLQUNMLE1BQU8sS0FHVCwwQkFDRSxNQUFPLEtBR1Qsc0JBQ0UsVUFBVyxNQUNYLFdBQVksTUFDWixNQUFPLEtBR1QseUJBQ0UsV0FBWSxLQUNaLGNBQWUiLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIHRoZSBub3JtYWxpemUoKSBtaXhpbi5cbkBmdW5jdGlvbiBfbm9ybWFsaXplLWluY2x1ZGUoJHNlY3Rpb24sICRleGNsdWRlOiBudWxsKSB7XG4gIC8vIEluaXRpYWxpemUgdGhlIGdsb2JhbCB2YXJpYWJsZXMgbmVlZGVkIGJ5IHRoaXMgZnVuY3Rpb24uXG4gIEBpZiBub3QgZ2xvYmFsX3ZhcmlhYmxlX2V4aXN0cyhfbm9ybWFsaXplLWluY2x1ZGUpIHtcbiAgICAkX25vcm1hbGl6ZS1pbmNsdWRlOiAoKSAhZ2xvYmFsO1xuICAgICRfbm9ybWFsaXplLWV4Y2x1ZGU6ICgpICFnbG9iYWw7XG4gIH1cbiAgLy8gU2luY2Ugd2UgYXJlIGdpdmVuIDIgcGFyYW1ldGVycywgc2V0IHRoZSBnbG9iYWwgdmFyaWFibGVzLlxuICBAaWYgJGV4Y2x1ZGUgIT0gbnVsbCB7XG4gICAgJGluY2x1ZGU6ICRzZWN0aW9uO1xuICAgIC8vIFNhc3MgZG9lc24ndCBoYXZlIHN0YXRpYyB2YXJpYWJsZXMsIHNvIHRoZSB3b3JrLWFyb3VuZCBpcyB0byBzdHVmZiB0aGVzZVxuICAgIC8vIHZhbHVlcyBpbnRvIGdsb2JhbCB2YXJpYWJsZXMgc28gd2UgY2FuIGFjY2VzcyB0aGVtIGluIGZ1dHVyZSBjYWxscy5cbiAgICAkX25vcm1hbGl6ZS1pbmNsdWRlOiBpZih0eXBlLW9mKCRpbmNsdWRlKSA9PSAnbGlzdCcsICRpbmNsdWRlLCAoJGluY2x1ZGUpKSAhZ2xvYmFsO1xuICAgICRfbm9ybWFsaXplLWV4Y2x1ZGU6IGlmKHR5cGUtb2YoJGV4Y2x1ZGUpID09ICdsaXN0JywgJGV4Y2x1ZGUsICgkZXhjbHVkZSkpICFnbG9iYWw7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgJHNlY3Rpb24gaXMgaW4gdGhlICRpbmNsdWRlIGxpc3QuXG4gIEBpZiBpbmRleCgkX25vcm1hbGl6ZS1pbmNsdWRlLCAkc2VjdGlvbikge1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBJZiAkaW5jbHVkZSBpcyBzZXQgdG8gKGFsbCksIG1ha2Ugc3VyZSAkc2VjdGlvbiBpcyBub3QgaW4gJGV4Y2x1ZGUuXG4gIEBlbHNlIGlmIG5vdCBpbmRleCgkX25vcm1hbGl6ZS1leGNsdWRlLCAkc2VjdGlvbikgYW5kIGluZGV4KCRfbm9ybWFsaXplLWluY2x1ZGUsIGFsbCkge1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuICBAcmV0dXJuIGZhbHNlO1xufVxuXG5AbWl4aW4gbm9ybWFsaXplKCRpbmNsdWRlOiAoYWxsKSwgJGV4Y2x1ZGU6ICgpKSB7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhlbHBlciBmdW5jdGlvbiBieSBwYXNzaW5nIGl0IHRoaXMgbWl4aW4ncyBwYXJhbWV0ZXJzLlxuICAkaW5pdDogX25vcm1hbGl6ZS1pbmNsdWRlKCRpbmNsdWRlLCAkZXhjbHVkZSk7XG5cbiAgLy8gSWYgd2UndmUgY3VzdG9taXplZCBhbnkgZm9udCB2YXJpYWJsZXMsIHdlJ2xsIG5lZWQgZXh0cmEgcHJvcGVydGllcy5cbiAgQGlmICRiYXNlLWxpbmUtaGVpZ2h0ICE9IDI0cHhcbiAgICBvciAkYmFzZS11bml0ICE9ICdlbSdcbiAgICBvciAkaDItZm9udC1zaXplICE9IDEuNSAgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDMtZm9udC1zaXplICE9IDEuMTcgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDQtZm9udC1zaXplICE9IDEgICAgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDUtZm9udC1zaXplICE9IDAuODMgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDYtZm9udC1zaXplICE9IDAuNjcgKiAkYmFzZS1mb250LXNpemUge1xuICAgICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtOiB0cnVlICFnbG9iYWw7XG4gIH1cblxuICAvKiEgbm9ybWFsaXplLXNjc3MgfCBNSVQvR1BMdjIgTGljZW5zZSB8IGJpdC5seS9ub3JtYWxpemUtc2NzcyAqL1xuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoZG9jdW1lbnQpIHtcbiAgICAvKiBEb2N1bWVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpblxuICAgICAqICAgIElFIG9uIFdpbmRvd3MgUGhvbmUgYW5kIGluIGlPUy5cbiAgICAgKi9cblxuICAgIGh0bWwge1xuICAgICAgQGlmICRiYXNlLWZvbnQtZmFtaWx5IHtcbiAgICAgICAgLyogQ2hhbmdlIHRoZSBkZWZhdWx0IGZvbnQgZmFtaWx5IGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLiAqL1xuICAgICAgICBmb250LWZhbWlseTogJGJhc2UtZm9udC1mYW1pbHk7XG4gICAgICB9XG4gICAgICBAaWYgJGJhc2UtZm9udC1zaXplICE9IDE2cHggb3IgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICAvLyBDb3JyZWN0IG9sZCBicm93c2VyIGJ1ZyB0aGF0IHByZXZlbnRlZCBhY2Nlc3NpYmxlIHJlc2l6aW5nIG9mIHRleHRcbiAgICAgICAgLy8gd2hlbiByb290IGZvbnQtc2l6ZSBpcyBzZXQgd2l0aCBweCBvciBlbS5cbiAgICAgICAgZm9udC1zaXplOiAoJGJhc2UtZm9udC1zaXplIC8gMTZweCkgKiAxMDAlO1xuICAgICAgfVxuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICgkYmFzZS1saW5lLWhlaWdodCAvICRiYXNlLWZvbnQtc2l6ZSkgKiAxZW07IC8qIDEgKi9cbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cbiAgICAgIH1cbiAgICAgIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG4gICAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKHNlY3Rpb25zKSB7XG4gICAgLyogU2VjdGlvbnNcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICovXG5cbiAgICBib2R5IHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGFydGljbGUsXG4gICAgYXNpZGUsXG4gICAgZm9vdGVyLFxuICAgIGhlYWRlcixcbiAgICBuYXYsXG4gICAgc2VjdGlvbiB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gICAgICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGgxIHtcbiAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGgxLWZvbnQtc2l6ZSk7XG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGgxLWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIC8qIFNldCAxIHVuaXQgb2YgdmVydGljYWwgcmh5dGhtIG9uIHRoZSB0b3AgYW5kIGJvdHRvbSBtYXJnaW5zLiAqL1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGgxLWZvbnQtc2l6ZSk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIG1hcmdpbjogMC42N2VtIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgIGgyIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDItZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoMi1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGgyLWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGgzIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDMtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoMy1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGgzLWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGg0IHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDQtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoNC1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGg0LWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGg1IHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDUtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoNS1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGg1LWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGg2IHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDYtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoNi1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGg2LWZvbnQtc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShncm91cGluZykge1xuICAgIC8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0IDEgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHRvcCBhbmQgYm90dG9tIG1hcmdpbi5cbiAgICAgICAqL1xuXG4gICAgICBibG9ja3F1b3RlIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxICRpbmRlbnQtYW1vdW50KTtcbiAgICAgIH1cblxuICAgICAgZGwsXG4gICAgICBvbCxcbiAgICAgIHVsIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDApO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFR1cm4gb2ZmIG1hcmdpbnMgb24gbmVzdGVkIGxpc3RzLlxuICAgICAgICovXG5cbiAgICAgIG9sLFxuICAgICAgdWwge1xuICAgICAgICBvbCxcbiAgICAgICAgdWwge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZCB7XG4gICAgICAgIG1hcmdpbjogMCAwIDAgJGluZGVudC1hbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIG9sLFxuICAgICAgdWwge1xuICAgICAgICBwYWRkaW5nOiAwIDAgMCAkaW5kZW50LWFtb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGZpZ2NhcHRpb24sXG4gICAgZmlndXJlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBtYXJnaW4gaW4gSUUgOC5cbiAgICAgKi9cblxuICAgIGZpZ3VyZSB7XG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgJGluZGVudC1hbW91bnQpO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBtYXJnaW46IDFlbSAkaW5kZW50LWFtb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICAgICAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICAgICAqL1xuXG4gICAgaHIge1xuICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cbiAgICAgIGhlaWdodDogMDsgLyogMSAqL1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cbiAgICAgKi9cblxuICAgIG1haW4ge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0IDEgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHRvcCBhbmQgYm90dG9tIG1hcmdpbi5cbiAgICAgICAqL1xuXG4gICAgICBwLFxuICAgICAgcHJlIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgcHJlIHtcbiAgICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICAgICAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGxpbmtzKSB7XG4gICAgLyogTGlua3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICAgICAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cbiAgICAgKi9cblxuICAgIGEge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IC8qIDEgKi9cbiAgICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXNraXA6IG9iamVjdHM7IC8qIDIgKi9cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKHRleHQpIHtcbiAgICAvKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LSBhbmQgRmlyZWZveCAzOS0uXG4gICAgICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGFiYnJbdGl0bGVdIHtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7IC8qIDEgKi9cbiAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAyICovXG4gICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IHRoZSBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgYnkgdGhlIG5leHQgcnVsZSBpbiBTYWZhcmkgNi5cbiAgICAgKi9cblxuICAgIGIsXG4gICAgc3Ryb25nIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBiLFxuICAgIHN0cm9uZyB7XG4gICAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgY29kZSxcbiAgICBrYmQsXG4gICAgc2FtcCB7XG4gICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cbiAgICAgIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc3R5bGUgaW4gQW5kcm9pZCA0LjMtLlxuICAgICAqL1xuXG4gICAgZGZuIHtcbiAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgYmFja2dyb3VuZCBhbmQgY29sb3IgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBtYXJrIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XG4gICAgICBjb2xvcjogIzAwMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHNtYWxsIHtcbiAgICAgIGZvbnQtc2l6ZTogODAlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICAgICAqIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHN1YixcbiAgICBzdXAge1xuICAgICAgZm9udC1zaXplOiA3NSU7XG4gICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICB9XG5cbiAgICBzdWIge1xuICAgICAgYm90dG9tOiAtMC4yNWVtO1xuICAgIH1cblxuICAgIHN1cCB7XG4gICAgICB0b3A6IC0wLjVlbTtcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGVtYmVkZGVkKSB7XG4gICAgLyogRW1iZWRkZWQgY29udGVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGF1ZGlvLFxuICAgIHZpZGVvIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICAgICAqL1xuXG4gICAgYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC0uXG4gICAgICovXG5cbiAgICBpbWcge1xuICAgICAgYm9yZGVyLXN0eWxlOiBub25lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuXG4gICAgc3ZnOm5vdCg6cm9vdCkge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGZvcm1zKSB7XG4gICAgLyogRm9ybXNcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBidXR0b24sXG4gICAgaW5wdXQsXG4gICAgb3B0Z3JvdXAsXG4gICAgc2VsZWN0LFxuICAgIHRleHRhcmVhIHtcbiAgICAgIGZvbnQtZmFtaWx5OiBpZigkYmFzZS1mb250LWZhbWlseSwgJGJhc2UtZm9udC1mYW1pbHksIHNhbnMtc2VyaWYpOyAvKiAxICovXG4gICAgICBmb250LXNpemU6IDEwMCU7IC8qIDEgKi9cbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAoJGJhc2UtbGluZS1oZWlnaHQgLyAkYmFzZS1mb250LXNpemUpICogMWVtOyAvKiAxICovXG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gICAgICB9XG4gICAgICBtYXJnaW46IDA7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAgICAgKi9cblxuICAgIGJ1dHRvbiB7XG4gICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UsIEZpcmVmb3gsIGFuZCBJRS5cbiAgICAgKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gICAgICovXG5cbiAgICBidXR0b24sXG4gICAgc2VsZWN0IHsgLyogMSAqL1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gUHJldmVudCBhIFdlYktpdCBidWcgd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gIGFuZCBgdmlkZW9gXG4gICAgICogICAgY29udHJvbHMgaW4gQW5kcm9pZCA0LlxuICAgICAqIDIuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBidXR0b24sXG4gICAgaHRtbCBbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xuICAgIFt0eXBlPVwicmVzZXRcIl0sXG4gICAgW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDIgKi9cbiAgICB9XG5cbiAgICBidXR0b24sXG4gICAgW3R5cGU9XCJidXR0b25cIl0sXG4gICAgW3R5cGU9XCJyZXNldFwiXSxcbiAgICBbdHlwZT1cInN1Ym1pdFwiXSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICAgICAqL1xuXG4gICAgICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBub25lO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cbiAgICAgICAqL1xuXG4gICAgICAmOi1tb3otZm9jdXNyaW5nIHtcbiAgICAgICAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gICAgICovXG5cbiAgICBpbnB1dCB7XG4gICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC0uXG4gICAgICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLS5cbiAgICAgKi9cblxuICAgIFt0eXBlPVwiY2hlY2tib3hcIl0sXG4gICAgW3R5cGU9XCJyYWRpb1wiXSB7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gICAgICBwYWRkaW5nOiAwOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICAgICAqL1xuXG4gICAgW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG4gICAgW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICAgICAqL1xuXG4gICAgW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgICAgIG91dGxpbmUtb2Zmc2V0OiAtMnB4OyAvKiAyICovXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cbiAgICAgICAqL1xuXG4gICAgICAmOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuICAgICAgJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICAgICAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIDo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cbiAgICAgIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3JyZWN0IHRoZSBwYWRkaW5nIGluIEZpcmVmb3guXG4gICAgICovXG5cbiAgICBmaWVsZHNldCB7XG4gICAgICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXG4gICAgICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICAgICAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgbGVnZW5kIHtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cbiAgICAgIGRpc3BsYXk6IHRhYmxlOyAvKiAxICovXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cbiAgICAgIHBhZGRpbmc6IDA7IC8qIDMgKi9cbiAgICAgIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXG4gICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAxICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICogMi4gQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAgICAgKi9cblxuICAgIHByb2dyZXNzIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogMSAqL1xuICAgICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRS5cbiAgICAgKi9cblxuICAgIHRleHRhcmVhIHtcbiAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoaW50ZXJhY3RpdmUpIHtcbiAgICAvKiBJbnRlcmFjdGl2ZVxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFLCBhbmQgRmlyZWZveC5cbiAgICAgKi9cblxuICAgIGRldGFpbHMge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBzdW1tYXJ5IHtcbiAgICAgIGRpc3BsYXk6IGxpc3QtaXRlbTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuXG4gICAgbWVudSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcblxuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgLypcbiAgICAgICAgICogMS4gU2V0IDEgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHRvcCBhbmQgYm90dG9tIG1hcmdpbi5cbiAgICAgICAgICogMi4gU2V0IGNvbnNpc3RlbnQgc3BhY2UgZm9yIHRoZSBsaXN0IHN0eWxlIGltYWdlLlxuICAgICAgICAgKi9cblxuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCk7IC8qIDEgKi9cbiAgICAgICAgcGFkZGluZzogMCAwIDAgJGluZGVudC1hbW91bnQ7IC8qIDIgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHVybiBvZmYgbWFyZ2lucyBvbiBuZXN0ZWQgbGlzdHMuXG4gICAgICAgICAqL1xuXG4gICAgICAgIG1lbnUgJixcbiAgICAgICAgb2wgJixcbiAgICAgICAgdWwgJiB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShzY3JpcHRpbmcpIHtcbiAgICAvKiBTY3JpcHRpbmdcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBjYW52YXMge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xuXG4gICAgdGVtcGxhdGUge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGhpZGRlbikge1xuICAgIC8qIEhpZGRlblxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC0uXG4gICAgICovXG5cbiAgICBbaGlkZGVuXSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxufVxuIiwiLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9cbi8qIERvY3VtZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAgICAgKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluXG4gICAgICogICAgSUUgb24gV2luZG93cyBQaG9uZSBhbmQgaW4gaU9TLlxuICAgICAqL1xuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qIFNlY3Rpb25zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICAgICAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cbmFydGljbGUsXG5hc2lkZSxcbmZvb3RlcixcbmhlYWRlcixcbm5hdixcbnNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAgICAgKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gICAgICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cbmZpZ2NhcHRpb24sXG5maWd1cmUge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXG4gICAgICovXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4OyB9XG5cbi8qKlxuICAgICAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gICAgICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gICAgICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xubWFpbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovIH1cblxuLyogTGlua3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICAgICAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cbiAgICAgKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLyogMSAqL1xuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzO1xuICAvKiAyICovIH1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny0gYW5kIEZpcmVmb3ggMzktLlxuICAgICAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gICAgICovXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIC8qIDEgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIC8qIDIgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAgICogUHJldmVudCB0aGUgZHVwbGljYXRlIGFwcGxpY2F0aW9uIG9mIGBib2xkZXJgIGJ5IHRoZSBuZXh0IHJ1bGUgaW4gU2FmYXJpIDYuXG4gICAgICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7IH1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyOyB9XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzdHlsZSBpbiBBbmRyb2lkIDQuMy0uXG4gICAgICovXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICAgICAqL1xubWFyayB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XG4gIGNvbG9yOiAjMDAwOyB9XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAgICAgKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW5cbiAgICAgKiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuYXVkaW8sXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICAgICAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICAgICAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAtLlxuICAgICAqL1xuaW1nIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lOyB9XG5cbi8qKlxuICAgICAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEZvcm1zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgICAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlO1xuICAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIG1hcmdpbjogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXG4gICAgICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gICAgICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICAgICAqL1xuYnV0dG9uLFxuc2VsZWN0IHtcbiAgLyogMSAqL1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxuXG4vKipcbiAgICAgKiAxLiBQcmV2ZW50IGEgV2ViS2l0IGJ1ZyB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2AgYW5kIGB2aWRlb2BcbiAgICAgKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmJ1dHRvbixcbmh0bWwgW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqLyB9XG5cbmJ1dHRvbixcblt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgLyoqXG4gICAgICAgKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxuICAgICAgICovXG4gIC8qKlxuICAgICAgICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICAgICAgICovIH1cbiAgYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuICBbdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcbiAgW3R5cGU9XCJyZXNldFwiXTo6LW1vei1mb2N1cy1pbm5lcixcbiAgW3R5cGU9XCJzdWJtaXRcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwOyB9XG4gIGJ1dHRvbjotbW96LWZvY3VzcmluZyxcbiAgW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG4gIFt0eXBlPVwicmVzZXRcIl06LW1vei1mb2N1c3JpbmcsXG4gIFt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7IH1cblxuLyoqXG4gICAgICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAgICAgKi9cbmlucHV0IHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxuICAgICAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC0uXG4gICAgICovXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgICAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAgICAgKi9cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXG4gICAgICovXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAvKiAyICovXG4gIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cbiAgICAgICAqLyB9XG4gIFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLCBbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gICAgICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxuICAgICAqL1xuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICAgKiBDb3JyZWN0IHRoZSBwYWRkaW5nIGluIEZpcmVmb3guXG4gICAgICovXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTsgfVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAgICAgKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gICAgICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5sZWdlbmQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAvKiAxICovXG4gIGRpc3BsYXk6IHRhYmxlO1xuICAvKiAxICovXG4gIG1heC13aWR0aDogMTAwJTtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAzICovXG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAyICovXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIC8qIDEgKi8gfVxuXG4vKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICAgICAqL1xucHJvZ3Jlc3Mge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAgICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRS5cbiAgICAgKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyogSW50ZXJhY3RpdmVcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXG4gICAgICovXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtOyB9XG5cbi8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5tZW51IHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyogU2NyaXB0aW5nXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuY2FudmFzIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIEhpZGRlblxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC0uXG4gICAgICovXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS1Cb2xkLmVvdFwiKTtcbiAgc3JjOiBsb2NhbChcIkhlbHZldGljYU5ldWVDeXItTWVkaXVtXCIpLCB1cmwoXCIuLi9mb250cy9IZWx2ZXRpY2FOZXVlL0hlbHZldGljYU5ldWUtQm9sZC5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250cy9IZWx2ZXRpY2FOZXVlL0hlbHZldGljYU5ldWUtQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcIi4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS1Cb2xkLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKTtcbiAgZm9udC13ZWlnaHQ6IDgwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS5lb3RcIik7XG4gIHNyYzogbG9jYWwoXCJIZWx2ZXRpY2FOZXVlQ3lyLU1lZGl1bVwiKSwgdXJsKFwiLi4vZm9udHMvSGVsdmV0aWNhTmV1ZS9IZWx2ZXRpY2FOZXVlLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcIi4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcIi4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIik7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwOyB9XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG5cbmJvZHkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGZvbnQtZmFtaWx5OiBcIkhlbHZldGljYSBOZXVlXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgY29sb3I6ICMyNDI0MjQ7IH1cbiAgYm9keSB7XG4gICAgZm9udC1zaXplOiAxOHB4OyB9XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTY4MHB4KSB7XG4gICAgICBib2R5IHtcbiAgICAgICAgZm9udC1zaXplOiBjYWxjKDE4cHggKyA0OCAqICgoMTAwdncgLSAxNjgwcHgpIC8gMzMyMCkpOyB9IH1cbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA1MDAwcHgpIHtcbiAgICAgIGJvZHkge1xuICAgICAgICBmb250LXNpemU6IDY2cHg7IH0gfVxuXG4uY29udGFpbmVyIHtcbiAgcGFkZGluZy1sZWZ0OiA2LjExMTExZW07XG4gIHBhZGRpbmctcmlnaHQ6IDYuMTExMTFlbTsgfVxuXG4uY29udGFpbmVyLWxlZnQge1xuICB3aWR0aDogNjIuNiU7XG4gIHBhZGRpbmctbGVmdDogMy44ODg4OWVtOyB9XG5cbi5jb250YWluZXItcmlnaHQge1xuICB3aWR0aDogMzcuNCU7XG4gIHBhZGRpbmctcmlnaHQ6IDMuODg4ODllbTsgfVxuXG4udGl0bGUge1xuICBwYWRkaW5nLXRvcDogMTZ2aDtcbiAgcGFkZGluZy1ib3R0b206IDR2aDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXgtd2lkdGg6IDgwJTtcbiAgbWFyZ2luOiAwIGF1dG87IH1cblxuLnN1YnRpdGxlIHtcbiAgZm9udC1zaXplOiAxLjMzMzMzZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDg1JTtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmctYm90dG9tOiA4dmg7IH1cblxuaDEsIGgyLCBoMywgaDQsIC5oNCB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBtYXJnaW46IDA7XG4gIGZvbnQtd2VpZ2h0OiA4MDA7IH1cblxuaDEge1xuICBmb250LXNpemU6IDUuNTU1NTZlbTsgfVxuXG5oMyB7XG4gIGZvbnQtc2l6ZTogMmVtOyB9XG5cbmg0LCAuaDQge1xuICBmb250LXNpemU6IDEuMzMzMzNlbTsgfVxuXG5hLCBidXR0b24sIGlucHV0W3R5cGU9J3N1Ym1pdCddIHtcbiAgY3Vyc29yOiBwb2ludGVyOyB9XG5cbi5wbGFjZWhvbGRlciB7XG4gIGhlaWdodDogMTAwdmg7IH1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTY4MHB4KSB7XG4gIGJvZHkge1xuICAgIGZvbnQtc2l6ZTogMThweDsgfVxuICBoMSB7XG4gICAgZm9udC1zaXplOiAxMDVweDsgfVxuICAuY29udGFpbmVyLWxlZnQge1xuICAgIHBhZGRpbmctbGVmdDogNzFweDsgfVxuICAuY29udGFpbmVyLXJpZ2h0IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiA3NHB4OyB9XG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmctbGVmdDogMTEwcHg7XG4gICAgcGFkZGluZy1yaWdodDogMTEwcHg7IH1cbiAgLnRpdGxlIHtcbiAgICBwYWRkaW5nOiAxMDdweCAwIDI5cHg7XG4gICAgbWF4LXdpZHRoOiA3MzFweDsgfVxuICAuc3VidGl0bGUge1xuICAgIHBhZGRpbmctYm90dG9tOiA2M3B4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1heC13aWR0aDogMTAxMnB4OyB9IH1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI1MHB4KSB7XG4gIGgxIHtcbiAgICBmb250LXNpemU6IDcycHg7IH1cbiAgLmNvbnRhaW5lci1sZWZ0IHtcbiAgICB3aWR0aDogNTUlOyB9XG4gIC5jb250YWluZXItcmlnaHQge1xuICAgIHdpZHRoOiA0NSU7IH0gfVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgYm9keSB7XG4gICAgZm9udC1zaXplOiAxNnB4OyB9XG4gIC5jb250YWluZXItcmlnaHQsIC5jb250YWluZXItbGVmdCB7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgLmNvbnRhaW5lci1sZWZ0LCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG4gICAgcGFkZGluZy1yaWdodDogNTBweDsgfSB9XG5cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIGJvZHkge1xuICAgIGZvbnQtc2l6ZTogMTRweDsgfVxuICBoMSB7XG4gICAgZm9udC1zaXplOiA2MHB4OyB9XG4gIGgzIHtcbiAgICBmb250LXNpemU6IDI0cHg7IH1cbiAgaDQsIC5oNCB7XG4gICAgZm9udC1zaXplOiAxNnB4OyB9XG4gIC50aXRsZSB7XG4gICAgbWF4LXdpZHRoOiA3NSU7XG4gICAgcGFkZGluZzogNzVweCAwIDE5cHg7IH1cbiAgLnN1YnRpdGxlIHtcbiAgICBmb250LXNpemU6IDE2cHg7IH0gfVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NzZweCkge1xuICAuY29udGFpbmVyLWxlZnQsIC5jb250YWluZXItcmlnaHQsIC5jb250YWluZXIge1xuICAgIHBhZGRpbmctbGVmdDogMjJweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyNHB4OyB9XG4gIGgxIHtcbiAgICBmb250LXNpemU6IDIuMzMzMzNlbTsgfSB9XG5cbkBrZXlmcmFtZXMgZmFkZUluIHtcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMDsgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMTsgfSB9XG5cbi5oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIHBhZGRpbmctdG9wOiA0LjV2aDsgfVxuICAuaGVhZGVyX19sb2dvIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luLXJpZ2h0OiA0MHB4OyB9XG4gICAgLmhlYWRlcl9fbG9nbyAubG9nby1yZWQge1xuICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAgIC5oZWFkZXJfX2xvZ28gaW1nIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9XG4gIC5oZWFkZXJfX25hdiB7XG4gICAgZGlzcGxheTogZmxleDsgfVxuICAgIC5oZWFkZXJfX25hdl9fdWwge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgcGFkZGluZzogMCAyMHB4IDAgMDtcbiAgICAgIG1hcmdpbjogMCBhdXRvOyB9XG4gICAgLmhlYWRlcl9fbmF2X19pdGVtIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMC4yNzc3OGVtO1xuICAgICAgbWFyZ2luLWxlZnQ6IDAuMjc3NzhlbTtcbiAgICAgIGZsZXgtc2hyaW5rOiAwOyB9XG4gICAgLmhlYWRlcl9fbmF2X19saW5rIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgZm9udC1zaXplOiAwLjc3Nzc4ZW07XG4gICAgICBsaW5lLWhlaWdodDogMS4yO1xuICAgICAgcGFkZGluZy1yaWdodDogMC4yNzc3OGVtO1xuICAgICAgcGFkZGluZy1sZWZ0OiAwLjI3Nzc4ZW07XG4gICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgdHJhbnNpdGlvbjogZm9udC13ZWlnaHQgLjRzOyB9XG4gICAgICAubm8tdG91Y2ggLmhlYWRlcl9fbmF2X19saW5rOmhvdmVyIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDgwMDsgfVxuICAgICAgLm5vLXRvdWNoIC5oZWFkZXJfX25hdl9fbGluazphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS10ZXh0KS9cIlwiO1xuICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICBmb250LXdlaWdodDogODAwOyB9XG4gIC5oZWFkZXJfX3JpZ2h0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cbiAgLmhlYWRlcl9fcGRmLCAuaGVhZGVyX19waG9uZSwgLmhlYWRlcl9fbGFuZyB7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDAuNzc3NzhlbTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI3Nzc4ZW07XG4gICAgcGFkZGluZy1sZWZ0OiAwLjI3Nzc4ZW07XG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICBmb250LXdlaWdodDogODAwO1xuICAgIGNvbG9yOiAjRUQxQzI0O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICAuaGVhZGVyX19wZGYge1xuICAgIG1hcmdpbi1sZWZ0OiAyLjVlbTtcbiAgICBtYXJnaW4tcmlnaHQ6IDEuMTExMTFlbTsgfVxuICAgIC5oZWFkZXJfX3BkZiBzcGFuIHtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgIHRyYW5zaXRpb246IGJvcmRlci1ib3R0b20tY29sb3IgLjRzOyB9XG4gICAgLmhlYWRlcl9fcGRmIHN2ZyB7XG4gICAgICB3aWR0aDogMC44ODg4OWVtO1xuICAgICAgaGVpZ2h0OiAxLjExMTExZW07XG4gICAgICBtYXJnaW4tcmlnaHQ6IDAuNjY2NjdlbTtcbiAgICAgIGZpbGw6ICNFRDFDMjQ7IH1cbiAgICAubm8tdG91Y2ggLmhlYWRlcl9fcGRmOmhvdmVyIHNwYW4ge1xuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI0VEMUMyNDsgfVxuICAuaGVhZGVyX19waG9uZSBzdmcge1xuICAgIGZpbGw6ICNFRDFDMjQ7XG4gICAgd2lkdGg6IDAuODg4ODllbTtcbiAgICBoZWlnaHQ6IDAuODg4ODllbTtcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNjY2NjdlbTsgfVxuICAuaGVhZGVyX19sYW5nIHtcbiAgICBtYXJnaW4tbGVmdDogYXV0bzsgfVxuICAuaGVhZGVyLmZpeGVkIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBvcGFjaXR5OiAxO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjRzO1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjRjVGNUY1O1xuICAgIHBhZGRpbmctdG9wOiAxLjM4ODg5ZW07XG4gICAgcGFkZGluZy1ib3R0b206IDAuODMzMzNlbTsgfVxuICAgIC5oZWFkZXIuZml4ZWQgLmhlYWRlcl9fbG9nbyBpbWcge1xuICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAgICAgLmhlYWRlci5maXhlZCAuaGVhZGVyX19sb2dvIGltZy5sb2dvLXJlZCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgLmhlYWRlci5maXhlZCAuaGVhZGVyX19uYXZfX2xpbmsge1xuICAgICAgY29sb3I6ICMyNDI0MjQ7IH1cbiAgLmhlYWRlci5vcGFjaXR5IHtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE2ODBweCkge1xuICAgIC5oZWFkZXIge1xuICAgICAgcGFkZGluZy10b3A6IDM4cHg7IH1cbiAgICAgIC5oZWFkZXJfX2xvZ28ge1xuICAgICAgICBtYXgtd2lkdGg6IDI1MHB4OyB9XG4gICAgICAuaGVhZGVyX19uYXZfX3VsIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7IH1cbiAgICAgIC5oZWFkZXJfX25hdl9faXRlbSB7XG4gICAgICAgIG1hcmdpbjogMCA1cHg7IH1cbiAgICAgIC5oZWFkZXJfX25hdl9fbGluayB7XG4gICAgICAgIHBhZGRpbmc6IDAgNXB4OyB9XG4gICAgICAuaGVhZGVyX19wZGYge1xuICAgICAgICBtYXJnaW4tbGVmdDogNDVweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4OyB9XG4gICAgICAgIC5oZWFkZXJfX3BkZiBzdmcge1xuICAgICAgICAgIHdpZHRoOiAxNnB4O1xuICAgICAgICAgIGhlaWdodDogMjBweDsgfVxuICAgICAgLmhlYWRlcl9fcGhvbmUgc3ZnIHtcbiAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgIGhlaWdodDogMTZweDsgfVxuICAgICAgLmhlYWRlci5maXhlZCB7XG4gICAgICAgIHBhZGRpbmctdG9wOiAzMHB4O1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDsgfSB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEyNTBweCkge1xuICAgIC5oZWFkZXIuZml4ZWQge1xuICAgICAgcGFkZGluZy10b3A6IDIwcHg7IH1cbiAgICAuaGVhZGVyX19sb2dvIHtcbiAgICAgIG1heC13aWR0aDogMjAwcHg7IH1cbiAgICAuaGVhZGVyX19uYXZfX3VsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICAuaGVhZGVyX19sb2dvIHtcbiAgICAgIG1pbi13aWR0aDogMTUwcHg7IH1cbiAgICAuaGVhZGVyX19wZGYge1xuICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAgIC5oZWFkZXJfX3Bob25lLCAuaGVhZGVyX19sYW5nIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIGNvbG9yOiAjZmZmOyB9XG4gICAgICAuaGVhZGVyX19waG9uZSBzdmcsIC5oZWFkZXJfX2xhbmcgc3ZnIHtcbiAgICAgICAgZmlsbDogI2ZmZjsgfVxuICAgIC5oZWFkZXIuZml4ZWQgLmhlYWRlcl9fbG9nbyB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgLmhlYWRlci5maXhlZCAuaGVhZGVyX19yaWdodCB7XG4gICAgICBwYWRkaW5nLXRvcDogMDsgfVxuICAgIC5oZWFkZXIuZml4ZWQgLmhlYWRlcl9fcGhvbmUsIC5oZWFkZXIuZml4ZWQgLmhlYWRlcl9fbGFuZyB7XG4gICAgICBjb2xvcjogI0VEMUMyNDsgfVxuICAgICAgLmhlYWRlci5maXhlZCAuaGVhZGVyX19waG9uZSBzdmcsIC5oZWFkZXIuZml4ZWQgLmhlYWRlcl9fbGFuZyBzdmcge1xuICAgICAgICBmaWxsOiAjRUQxQzI0OyB9IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTc2cHgpIHtcbiAgICAuaGVhZGVyIHtcbiAgICAgIGZsZXgtd3JhcDogd3JhcDsgfVxuICAgICAgLmhlYWRlcl9fcmlnaHQge1xuICAgICAgICBwYWRkaW5nLXRvcDogMzBweDsgfVxuICAgICAgLmhlYWRlcl9fbG9nbyB7XG4gICAgICAgIG1heC13aWR0aDogMjcwcHg7XG4gICAgICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuLmludHJvIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBoZWlnaHQ6IDEwMHZoO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1pbi1oZWlnaHQ6IDM2LjExMTExZW07IH1cbiAgLmludHJvX19pbmZvIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgcGFkZGluZy1ib3R0b206IDI1dmg7XG4gICAgei1pbmRleDogMTtcbiAgICBjb2xvcjogI2ZmZjsgfVxuICAgIC5pbnRyb19faW5mb19fdmlkZW8ge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgdG9wOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vdmlkZW8vdmlkZW9fdGh1bWJuYWlsLmpwZ1wiKTtcbiAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyB9XG4gICAgICAuaW50cm9fX2luZm9fX3ZpZGVvOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzYsIDMyLCA0MCwgMC44Nyk7IH1cbiAgICAgIC5pbnRyb19faW5mb19fdmlkZW8gdmlkZW8ge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOyB9XG4gIC5pbnRyb19fc3VidGl0bGUge1xuICAgIHBhZGRpbmctdG9wOiA1dmg7XG4gICAgbWFyZ2luOiAwO1xuICAgIGZvbnQtc2l6ZTogMS4zMzMzM2VtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjI7IH1cbiAgLmludHJvX19mb3JtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTB2aDtcbiAgICBwYWRkaW5nLWxlZnQ6IDIuNzc3NzhlbTtcbiAgICBwYWRkaW5nLXJpZ2h0OiA4LjExMTExZW07IH1cblxuLmFycm93LW5leHQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDEwO1xuICBwYWRkaW5nLXRvcDogMC41NTU1NmVtO1xuICBwYWRkaW5nLWJvdHRvbTogMC41NTU1NmVtO1xuICBwYWRkaW5nLWxlZnQ6IDAuNTU1NTZlbTtcbiAgcGFkZGluZy1yaWdodDogMC41NTU1NmVtO1xuICBsZWZ0OiAzLjMzMzMzZW07XG4gIGJvdHRvbTogMS42NjY2N2VtOyB9XG4gIC5hcnJvdy1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDEuMDU1NTZlbTtcbiAgICBoZWlnaHQ6IDAuNjExMTFlbTsgfVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNjgwcHgpIHtcbiAgLmludHJvX19pbmZvIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTI4cHg7IH1cbiAgLmludHJvX19mb3JtIHtcbiAgICBwYWRkaW5nOiAwIDE0NnB4IDUxcHggNTBweDsgfVxuICAuaW50cm9fX3N1YnRpdGxlIHtcbiAgICBwYWRkaW5nLXRvcDogMzNweDsgfVxuICAuYXJyb3ctbmV4dCB7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBsZWZ0OiA2NXB4O1xuICAgIGJvdHRvbTogMThweDsgfVxuICAgIC5hcnJvdy1uZXh0IHN2ZyB7XG4gICAgICB3aWR0aDogMTdweDtcbiAgICAgIGhlaWdodDogMTBweDsgfSB9XG5cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAuaW50cm9fX2Zvcm0ge1xuICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuaW50cm9fX2luZm9fX3ZpZGVvIHZpZGVvIHtcbiAgICBkaXNwbGF5OiBub25lOyB9IH1cblxuaW5wdXQge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDA7IH1cbiAgaW5wdXQ6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7IH1cblxuQC13ZWJraXQta2V5ZnJhbWVzIGF1dG9maWxsIHtcbiAgdG8ge1xuICAgIGNvbG9yOiBpbmhlcml0O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7IH0gfVxuXG5pbnB1dDotd2Via2l0LWF1dG9maWxsIHtcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogYXV0b2ZpbGw7XG4gIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDsgfVxuXG5idXR0b24sIGlucHV0LCBvcHRncm91cCwgc2VsZWN0LCB0ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBcIkhlbHZldGljYSBOZXVlXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZjsgfVxuXG4uZm9ybSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICB3aWR0aDogOTAlOyB9XG4gIC5mb3JtX19ncm91cCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlOyB9XG4gIC5mb3JtX190aXRsZSB7XG4gICAgcGFkZGluZy1ib3R0b206IDV2aDsgfVxuICAuZm9ybV9fbGFiZWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNzc3OGVtO1xuICAgIGZvbnQtc2l6ZTogMC43Nzc3OGVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjI7IH1cbiAgLmZvcm1fX2lucHV0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZvbnQtc2l6ZTogMC43Nzc3OGVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgcGFkZGluZy10b3A6IDAuNTU1NTZlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41NTU1NmVtO1xuICAgIG1hcmdpbi1ib3R0b206IDEuNjY2NjdlbTtcbiAgICBib3JkZXI6IDA7XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNDRENEQ0Q7IH1cbiAgICAuZm9ybV9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6ICNDRENEQ0Q7IH1cbiAgICAuZm9ybV9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6ICNDRENEQ0Q7IH1cbiAgICAuZm9ybV9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICAgIGNvbG9yOiAjQ0RDRENEOyB9XG4gICAgLmZvcm1fX2lucHV0Oi1tb3otcGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6ICNDRENEQ0Q7IH1cbiAgLmZvcm1fX2J0biB7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogYXV0bztcbiAgICBtaW4taGVpZ2h0OiA0N3B4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFRDFDMjQ7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyOiAwO1xuICAgIGJvcmRlci1yYWRpdXM6IDIlO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBmb250LXdlaWdodDogODAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgIG1hcmdpbi10b3A6IDAuNTU1NTZlbTtcbiAgICBwYWRkaW5nLXRvcDogMC44MzMzM2VtO1xuICAgIHBhZGRpbmctYm90dG9tOiAwLjgzMzMzZW07XG4gICAgcGFkZGluZy1sZWZ0OiAxLjY2NjY3ZW07XG4gICAgcGFkZGluZy1yaWdodDogMS42NjY2N2VtOyB9XG4gIC5mb3JtIC5lcnJvci1tZXNzYWdlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDAuNTU1NTZlbTtcbiAgICBsZWZ0OiAwO1xuICAgIGNvbG9yOiAjRUQxQzI0O1xuICAgIG9wYWNpdHk6IDA7XG4gICAgZm9udC1zaXplOiAwLjY2NjY3ZW07IH1cbiAgICAuZm9ybSAuZXJyb3ItbWVzc2FnZS52aXNpYmxlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIGFuaW1hdGlvbjogZmFkZUluIC40czsgfVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNjgwcHgpIHtcbiAgLmZvcm0ge1xuICAgIG1heC13aWR0aDogMzE0cHg7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgICAuZm9ybV9fdGl0bGUge1xuICAgICAgcGFkZGluZy1ib3R0b206IDQwcHg7IH1cbiAgICAuZm9ybV9fbGFiZWwge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfVxuICAgIC5mb3JtX19pbnB1dCB7XG4gICAgICBwYWRkaW5nOiA2cHggMDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XG4gICAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7IH1cbiAgICAuZm9ybV9fYnRuIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgIGhlaWdodDogNDdweDtcbiAgICAgIHBhZGRpbmc6IDEwcHggMzFweDsgfSB9XG5cbi5zbGlkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG4gIC5zbGlkZXJfX2xlZnQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgcGFkZGluZy10b3A6IDR2aDtcbiAgICBwYWRkaW5nLWJvdHRvbTogNHZoO1xuICAgIHotaW5kZXg6IDE7IH1cbiAgICAuc2xpZGVyX19sZWZ0OmJlZm9yZSB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHdpZHRoOiA5MCU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUQxQzI0O1xuICAgICAgei1pbmRleDogLTE7IH1cbiAgLnNsaWRlcl9fcmlnaHQge1xuICAgIHBhZGRpbmctdG9wOiA0dmg7IH1cbiAgICAuc2xpZGVyX19yaWdodF9faW5uZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgaGVpZ2h0OiAxNS41NTU1NmVtOyB9XG4gICAgLnNsaWRlcl9fcmlnaHRfX2Fycm93cyB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gIC5zbGlkZXJfX2NvbnRlbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgdG9wOiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgcGFkZGluZy1sZWZ0OiAyLjc3Nzc4ZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC40czsgfVxuICAgIC5zbGlkZXJfX2NvbnRlbnQuYWN0aXZlIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC44czsgfVxuICAgIC5zbGlkZXJfX2NvbnRlbnQucHJldi10ZXh0IHtcbiAgICAgIG9wYWNpdHk6IDA7IH1cbiAgLnNsaWRlcl9fdGV4dCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICBtYXJnaW4tdG9wOiAyZW07IH1cbiAgLnNsaWRlcl9fYXJyb3dzIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDExJTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyLjIyMjIyZW07XG4gICAgcGFkZGluZy10b3A6IDIuMjIyMjJlbTsgfVxuICAgIC5zbGlkZXJfX2Fycm93c19fcHJldiwgLnNsaWRlcl9fYXJyb3dzX19uZXh0IHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgd2lkdGg6IDJlbTsgfVxuICAgICAgLnNsaWRlcl9fYXJyb3dzX19wcmV2IHN2ZywgLnNsaWRlcl9fYXJyb3dzX19uZXh0IHN2ZyB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogbGVmdCAuNHM7XG4gICAgICAgIGhlaWdodDogMC44ODg4OWVtOyB9XG4gICAgLnNsaWRlcl9fYXJyb3dzX19wcmV2IHtcbiAgICAgIG1hcmdpbi1yaWdodDogMS42NjY2N2VtOyB9XG4gICAgLm5vLXRvdWNoIC5zbGlkZXJfX2Fycm93c19fcHJldjpob3ZlciBzdmcge1xuICAgICAgbGVmdDogLTEwcHg7IH1cbiAgICAubm8tdG91Y2ggLnNsaWRlcl9fYXJyb3dzX19uZXh0OmhvdmVyIHN2ZyB7XG4gICAgICBsZWZ0OiAxMHB4OyB9XG4gIC5zbGlkZXJfX2J1bGxldHMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcGFkZGluZy10b3A6IDIuMjIyMjJlbTtcbiAgICBwYWRkaW5nLWxlZnQ6IDIuNzc3NzhlbTsgfVxuICAgIC5zbGlkZXJfX2J1bGxldHNfX2l0ZW0ge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIG1hcmdpbi1yaWdodDogMi41ZW07IH1cbiAgICAgIC5zbGlkZXJfX2J1bGxldHNfX2l0ZW06bGFzdC1jaGlsZCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDsgfVxuICAgICAgLnNsaWRlcl9fYnVsbGV0c19faXRlbSAubGluZXMsIC5zbGlkZXJfX2J1bGxldHNfX2l0ZW0gLmZpbGxlZCB7XG4gICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICBoZWlnaHQ6IDJlbTtcbiAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgIGZpbGw6ICNFRDFDMjQ7XG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjJzOyB9XG4gICAgICAuc2xpZGVyX19idWxsZXRzX19pdGVtIC5saW5lcyB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBvcGFjaXR5OiAwOyB9XG4gICAgICAuc2xpZGVyX19idWxsZXRzX19pdGVtLmFjdGl2ZSAuZmlsbGVkIHtcbiAgICAgICAgb3BhY2l0eTogMDsgfVxuICAgICAgLnNsaWRlcl9fYnVsbGV0c19faXRlbS5hY3RpdmUgLmxpbmVzIHtcbiAgICAgICAgb3BhY2l0eTogMTsgfVxuICAuc2xpZGVyIC5zbGlkZSB7XG4gICAgZGlzcGxheTogbm9uZTsgfVxuICAgIC5zbGlkZXIgLnNsaWRlX19pbWcge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBhbmltYXRpb24tZGVsYXk6IC4zcztcbiAgICAgIGFuaW1hdGlvbjogbmV4dFNsaWRlIC44cztcbiAgICAgIGhlaWdodDogMTUuNTU1NTZlbTsgfVxuICAgICAgLnNsaWRlciAuc2xpZGVfX2ltZyBpbWcge1xuICAgICAgICBtYXgtaGVpZ2h0OiAxNS41NTU1NmVtO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7IH1cbiAgICAuc2xpZGVyIC5zbGlkZS5wcmV2LXNsaWRlIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcGFkZGluZy10b3A6IDR2aDsgfVxuICAgICAgLnNsaWRlciAuc2xpZGUucHJldi1zbGlkZSAuc2xpZGVfX2ltZyB7XG4gICAgICAgIGFuaW1hdGlvbjogcHJldlNsaWRlIC44cztcbiAgICAgICAgcmlnaHQ6IDEwMHZ3O1xuICAgICAgICBvcGFjaXR5OiAxOyB9XG4gICAgLnNsaWRlciAuc2xpZGUuYWN0aXZlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgICAuc2xpZGVyIC5zbGlkZS5hY3RpdmUgLnNsaWRlX19pbWcge1xuICAgICAgICByaWdodDogMDsgfVxuXG5Aa2V5ZnJhbWVzIHByZXZTbGlkZSB7XG4gIGZyb20ge1xuICAgIHJpZ2h0OiAwOyB9XG4gIHRvIHtcbiAgICByaWdodDogMTAwdnc7IH0gfVxuXG5Aa2V5ZnJhbWVzIG5leHRTbGlkZSB7XG4gIGZyb20ge1xuICAgIHJpZ2h0OiAxMDB2dzsgfVxuICB0byB7XG4gICAgcmlnaHQ6IDA7IH0gfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNjgwcHgpIHtcbiAgICAuc2xpZGVyX19sZWZ0IHtcbiAgICAgIHBhZGRpbmctdG9wOiAzNXB4O1xuICAgICAgcGFkZGluZy1ib3R0b206IDI3cHg7IH1cbiAgICAgIC5zbGlkZXJfX2xlZnQ6YmVmb3JlIHtcbiAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDgwcHgpOyB9XG4gICAgLnNsaWRlcl9fcmlnaHQge1xuICAgICAgcGFkZGluZy10b3A6IDM1cHg7IH1cbiAgICAgIC5zbGlkZXJfX3JpZ2h0X19pbm5lciB7XG4gICAgICAgIGhlaWdodDogMjgxcHg7IH1cbiAgICAuc2xpZGVyX19jb250ZW50IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICAgICAgbWF4LXdpZHRoOiA0MzdweDsgfVxuICAgIC5zbGlkZXIgLnNsaWRlX19pbWcge1xuICAgICAgaGVpZ2h0OiAyODFweDsgfVxuICAgIC5zbGlkZXIgLnNsaWRlLnByZXYtc2xpZGUge1xuICAgICAgcGFkZGluZy10b3A6IDM1cHg7IH1cbiAgICAuc2xpZGVyX19hcnJvd3Mge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgcGFkZGluZzogNDBweCAxMjVweCAwIDA7IH1cbiAgICAgIC5zbGlkZXJfX2Fycm93c19fbmV4dCBzdmcsIC5zbGlkZXJfX2Fycm93c19fcHJldiBzdmcge1xuICAgICAgICBoZWlnaHQ6IDE5cHg7IH1cbiAgICAuc2xpZGVyX19idWxsZXRzIHtcbiAgICAgIHBhZGRpbmc6IDQwcHggMCAwIDUwcHg7IH1cbiAgICAgIC5zbGlkZXJfX2J1bGxldHNfX2l0ZW0ge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDQ1cHg7IH1cbiAgICAgICAgLnNsaWRlcl9fYnVsbGV0c19faXRlbSBzdmcge1xuICAgICAgICAgIGhlaWdodDogMzFweDsgfSB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIC5zbGlkZXJfX2J1bGxldHMge1xuICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAgIC5zbGlkZXJfX3JpZ2h0X19pbm5lciB7XG4gICAgICBoZWlnaHQ6IDI1MHB4OyB9XG4gICAgLnNsaWRlcl9fY29udGVudCB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDA7IH1cbiAgICAuc2xpZGVyIC5zbGlkZV9faW1nIHtcbiAgICAgIGhlaWdodDogMjUwcHg7IH0gfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5zbGlkZXJfX2xlZnQge1xuICAgICAgd2lkdGg6IDUwJTtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDMwcHg7IH1cbiAgICAuc2xpZGVyX19hcnJvd3Mge1xuICAgICAgcGFkZGluZzogMzBweCA3MHB4IDAgMDsgfVxuICAgIC5zbGlkZXJfX3JpZ2h0IHtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7IH1cbiAgICAgIC5zbGlkZXJfX3JpZ2h0X19pbm5lciB7XG4gICAgICAgIGhlaWdodDogMTcwcHg7IH1cbiAgICAuc2xpZGVyIC5zbGlkZV9faW1nIHtcbiAgICAgIGhlaWdodDogMTcwcHg7IH1cbiAgICAgIC5zbGlkZXIgLnNsaWRlX19pbWcgaW1nIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlOyB9IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTc2cHgpIHtcbiAgICAuc2xpZGVyIHtcbiAgICAgIGZsZXgtd3JhcDogd3JhcDsgfVxuICAgICAgLnNsaWRlcl9fbGVmdCB7XG4gICAgICAgIHdpZHRoOiAxMDAlOyB9XG4gICAgICAuc2xpZGVyX19hcnJvd3Mge1xuICAgICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgICAuc2xpZGVyX19yaWdodCB7XG4gICAgICAgIHBhZGRpbmc6IDQwcHggMjBweDsgfVxuICAgICAgICAuc2xpZGVyX19yaWdodF9faW5uZXIge1xuICAgICAgICAgIGhlaWdodDogMTIwcHg7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgICAgIC5zbGlkZXJfX3JpZ2h0X19hcnJvd3Mge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB3aWR0aDogMzBweDsgfVxuICAgICAgICAgIC5zbGlkZXJfX3JpZ2h0X19hcnJvd3Mgc3ZnIHtcbiAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgIHN0cm9rZTogIzI0MjQyNDtcbiAgICAgICAgICAgIGZpbGw6ICMyNDI0MjQ7IH1cbiAgICAgICAgICAuc2xpZGVyX19yaWdodF9fYXJyb3dzX19uZXh0IHtcbiAgICAgICAgICAgIHJpZ2h0OiAwOyB9XG4gICAgICAgICAgLnNsaWRlcl9fcmlnaHRfX2Fycm93c19fcHJldiB7XG4gICAgICAgICAgICBsZWZ0OiAwOyB9XG4gICAgICAuc2xpZGVyX19sZWZ0IHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxuICAgICAgICAuc2xpZGVyX19sZWZ0OmJlZm9yZSB7XG4gICAgICAgICAgd2lkdGg6IDUwJTsgfVxuICAgICAgLnNsaWRlcl9fY29udGVudCB7XG4gICAgICAgIHBhZGRpbmc6IDAgNDBweDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGxlZnQ6IGF1dG87XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBtYXgtd2lkdGg6IHVuc2V0O1xuICAgICAgICByaWdodDogLTEwMHZ3OyB9XG4gICAgICAgIC5zbGlkZXJfX2NvbnRlbnQuYWN0aXZlIHtcbiAgICAgICAgICBhbmltYXRpb246IG5leHRTbGlkZSAuNHM7XG4gICAgICAgICAgcmlnaHQ6IDA7IH1cbiAgICAgICAgLnNsaWRlcl9fY29udGVudC5wcmV2LXRleHQge1xuICAgICAgICAgIGFuaW1hdGlvbjogcHJldlNsaWRlIC40cztcbiAgICAgICAgICByaWdodDogMTAwdnc7IH1cbiAgICAgIC5zbGlkZXJfX3RleHQge1xuICAgICAgICBtYXJnaW46IDE2cHggMCAwOyB9XG4gICAgICAuc2xpZGVyIC5zbGlkZSB7XG4gICAgICAgIHdpZHRoOiAxMDAlOyB9XG4gICAgICAgIC5zbGlkZXIgLnNsaWRlX19pbWcge1xuICAgICAgICAgIG1heC1oZWlnaHQ6IHVuc2V0O1xuICAgICAgICAgIG1pbi13aWR0aDogMTU0cHg7XG4gICAgICAgICAgd2lkdGg6IDYwJTtcbiAgICAgICAgICBoZWlnaHQ6IDQ4dnc7XG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87IH1cbiAgICAgICAgICAuc2xpZGVyIC5zbGlkZV9faW1nIGltZyB7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6IHVuc2V0OyB9XG4gICAgICAgIC5zbGlkZXIgLnNsaWRlLnByZXYtc2xpZGUge1xuICAgICAgICAgIHBhZGRpbmc6IDM1cHggMjRweCAyN3B4IDIycHg7IH1cbiAgICBAa2V5ZnJhbWVzIG5leHRTbGlkZSB7XG4gICAgICBmcm9tIHtcbiAgICAgICAgcmlnaHQ6IC0xMDB2dzsgfVxuICAgICAgdG8ge1xuICAgICAgICByaWdodDogMDsgfSB9IH1cblxuLnN1Y2Nlc3MtcG9wdXAge1xuICBkaXNwbGF5OiBub25lO1xuICBvcGFjaXR5OiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTUpO1xuICBwYWRkaW5nLXRvcDogNSU7XG4gIHBhZGRpbmctYm90dG9tOiA2JTsgfVxuICAuc3VjY2Vzcy1wb3B1cF9fY3Jvc3Mge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDIuMDU1NTZlbTtcbiAgICByaWdodDogNC4wNTU1NmVtO1xuICAgIGN1cnNvcjogcG9pbnRlcjsgfVxuICAgIC5zdWNjZXNzLXBvcHVwX19jcm9zcyBzdmcge1xuICAgICAgd2lkdGg6IDJlbTsgfVxuICAuc3VjY2Vzcy1wb3B1cF9faW5uZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiAzMCU7XG4gICAgcGFkZGluZy1sZWZ0OiAxLjU1NTU2ZW07XG4gICAgcGFkZGluZy1yaWdodDogM2VtO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cbiAgICAuc3VjY2Vzcy1wb3B1cF9faW5uZXIgc3ZnIHtcbiAgICAgIHdpZHRoOiAzZW07IH1cbiAgLnN1Y2Nlc3MtcG9wdXBfX3N1YnRpdGxlIHtcbiAgICBmb250LXNpemU6IDEuMTExMTFlbTtcbiAgICBtYXJnaW4tdG9wOiAxLjM4ODg5ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMi43Nzc3OGVtOyB9XG4gIC5zdWNjZXNzLXBvcHVwLnZpc2libGUge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICByaWdodDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFuaW1hdGlvbjogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIG9wYWNpdHk6IDE7XG4gICAgei1pbmRleDogMTA7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTY4MHB4KSB7XG4gICAgLnN1Y2Nlc3MtcG9wdXAge1xuICAgICAgcGFkZGluZy10b3A6IDQ4cHg7XG4gICAgICBwYWRkaW5nLWJvdHRvbTogNTVweDsgfVxuICAgICAgLnN1Y2Nlc3MtcG9wdXBfX2Nyb3NzIHtcbiAgICAgICAgdG9wOiAzN3B4O1xuICAgICAgICByaWdodDogNzRweDsgfVxuICAgICAgICAuc3VjY2Vzcy1wb3B1cF9fY3Jvc3Mgc3ZnIHtcbiAgICAgICAgICB3aWR0aDogNDBweDsgfVxuICAgICAgLnN1Y2Nlc3MtcG9wdXBfX2lubmVyIHtcbiAgICAgICAgbWF4LXdpZHRoOiA0MTBweDtcbiAgICAgICAgbWF4LWhlaWdodDogNTQ3cHg7XG4gICAgICAgIHdpZHRoOiAxMDAlOyB9XG4gICAgICAuc3VjY2Vzcy1wb3B1cF9fc3VidGl0bGUge1xuICAgICAgICBtYXJnaW4tdG9wOiAxNHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAzNnB4OyB9IH1cbiIsIkBmb250LWZhY2Uge1xyXG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnO1xyXG4gIHNyYzogdXJsKCcuLi9mb250cy9IZWx2ZXRpY2FOZXVlL0hlbHZldGljYU5ldWUtQm9sZC5lb3QnKTtcclxuICBzcmM6IGxvY2FsKCdIZWx2ZXRpY2FOZXVlQ3lyLU1lZGl1bScpLFxyXG4gIHVybCgnLi4vZm9udHMvSGVsdmV0aWNhTmV1ZS9IZWx2ZXRpY2FOZXVlLUJvbGQuZW90PyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSxcclxuICB1cmwoJy4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS1Cb2xkLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcclxuICB1cmwoJy4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS1Cb2xkLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcclxuICBmb250LXdlaWdodDogODAwO1xyXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICBmb250LWRpc3BsYXk6IHN3YXA7XHJcbn1cclxuXHJcbkBmb250LWZhY2Uge1xyXG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnO1xyXG4gIHNyYzogdXJsKCcuLi9mb250cy9IZWx2ZXRpY2FOZXVlL0hlbHZldGljYU5ldWUuZW90Jyk7XHJcbiAgc3JjOiBsb2NhbCgnSGVsdmV0aWNhTmV1ZUN5ci1NZWRpdW0nKSxcclxuICB1cmwoJy4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS5lb3Q/I2llZml4JykgZm9ybWF0KCdlbWJlZGRlZC1vcGVudHlwZScpLFxyXG4gIHVybCgnLi4vZm9udHMvSGVsdmV0aWNhTmV1ZS9IZWx2ZXRpY2FOZXVlLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcclxuICB1cmwoJy4uL2ZvbnRzL0hlbHZldGljYU5ldWUvSGVsdmV0aWNhTmV1ZS50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xyXG59XHJcbiIsIioge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbmJvZHkge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XHJcbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XHJcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGZvbnQtZmFtaWx5OiAkSGVsdmV0aWNhO1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgQGluY2x1ZGUgZmx1aWQtdHlwZSgxNjgwcHgsIDUwMDBweCwgMThweCwgNjZweCk7XHJcbiAgY29sb3I6ICRibGFjaztcclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctbGVmdCwgMTEwLCAkYmFzZS1zaXplKTtcclxuICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1yaWdodCwgMTEwLCAkYmFzZS1zaXplKTtcclxufVxyXG5cclxuLmNvbnRhaW5lci1sZWZ0IHtcclxuICB3aWR0aDogNjIuNiU7XHJcbiAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctbGVmdCwgNzAsICRiYXNlLXNpemUpO1xyXG59XHJcblxyXG4uY29udGFpbmVyLXJpZ2h0IHtcclxuICB3aWR0aDogMzcuNCU7XHJcbiAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctcmlnaHQsIDcwLCAkYmFzZS1zaXplKTtcclxufVxyXG5cclxuLnRpdGxlIHtcclxuICBwYWRkaW5nLXRvcDogMTZ2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogNHZoO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBtYXgtd2lkdGg6IDgwJTtcclxuICBtYXJnaW46IDAgYXV0bztcclxufVxyXG5cclxuLnN1YnRpdGxlIHtcclxuICBAaW5jbHVkZSBweHRvZW0oZm9udC1zaXplLCAyNCwgJGJhc2Utc2l6ZSk7XHJcbiAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgd2lkdGg6IDg1JTtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBwYWRkaW5nLWJvdHRvbTogOHZoO1xyXG59XHJcblxyXG5oMSwgaDIsIGgzLCBoNCwgLmg0IHtcclxuICBsaW5lLWhlaWdodDogMTtcclxuICBtYXJnaW46IDA7XHJcbiAgZm9udC13ZWlnaHQ6IDgwMDtcclxufVxyXG5cclxuaDEge1xyXG4gIEBpbmNsdWRlIHB4dG9lbShmb250LXNpemUsIDEwMCwgJGJhc2Utc2l6ZSk7XHJcbn1cclxuXHJcbmgzIHtcclxuICBAaW5jbHVkZSBweHRvZW0oZm9udC1zaXplLCAzNiwgJGJhc2Utc2l6ZSk7XHJcbn1cclxuXHJcbmg0LCAuaDQge1xyXG4gIEBpbmNsdWRlIHB4dG9lbShmb250LXNpemUsIDI0LCAkYmFzZS1zaXplKTtcclxufVxyXG5cclxuYSwgYnV0dG9uLCBpbnB1dFt0eXBlPSdzdWJtaXQnXSB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4ucGxhY2Vob2xkZXIge1xyXG4gIGhlaWdodDogMTAwdmg7XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE2ODBweCkge1xyXG4gIGJvZHkge1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gIH1cclxuICBoMSB7XHJcbiAgICBmb250LXNpemU6IDEwNXB4XHJcbiAgfVxyXG5cclxuICAuY29udGFpbmVyLWxlZnQge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3MXB4O1xyXG4gIH1cclxuXHJcbiAgLmNvbnRhaW5lci1yaWdodCB7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3NHB4O1xyXG4gIH1cclxuICAuY29udGFpbmVyIHtcclxuICAgIHBhZGRpbmctbGVmdDogMTEwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMTBweDtcclxuICB9XHJcblxyXG4gIC50aXRsZSB7XHJcbiAgICBwYWRkaW5nOiAxMDdweCAwIDI5cHg7XHJcbiAgICBtYXgtd2lkdGg6IDczMXB4O1xyXG4gIH1cclxuICAuc3VidGl0bGUge1xyXG4gICAgcGFkZGluZy1ib3R0b206IDYzcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMTAxMnB4O1xyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI1MHB4KSB7XHJcbiAgaDEge1xyXG4gICAgZm9udC1zaXplOiA3MnB4O1xyXG4gIH1cclxuICAuY29udGFpbmVyLWxlZnQge1xyXG4gICAgd2lkdGg6IDU1JTtcclxuICB9XHJcbiAgLmNvbnRhaW5lci1yaWdodCB7XHJcbiAgICB3aWR0aDogNDUlO1xyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgYm9keSB7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgfVxyXG4gIC5jb250YWluZXItcmlnaHQsIC5jb250YWluZXItbGVmdCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgLmNvbnRhaW5lci1sZWZ0LCAuY29udGFpbmVyIHtcclxuICAgIHBhZGRpbmctbGVmdDogNTBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gIGJvZHkge1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gIH1cclxuICBoMSB7XHJcbiAgICBmb250LXNpemU6IDYwcHg7XHJcbiAgfVxyXG5cclxuICBoMyB7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgfVxyXG5cclxuICBoNCwgLmg0IHtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICB9XHJcblxyXG4gIC50aXRsZSB7XHJcbiAgICBtYXgtd2lkdGg6IDc1JTtcclxuICAgIHBhZGRpbmc6IDc1cHggMCAxOXB4O1xyXG4gIH1cclxuXHJcbiAgLnN1YnRpdGxlIHtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU3NnB4KSB7XHJcbiAgLmNvbnRhaW5lci1sZWZ0LCAuY29udGFpbmVyLXJpZ2h0LCAuY29udGFpbmVyIHtcclxuICAgIHBhZGRpbmctbGVmdDogMjJweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDI0cHg7XHJcbiAgfVxyXG4gIGgxIHtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShmb250LXNpemUsIDQyLCAkYmFzZS1zaXplKTtcclxuICB9XHJcbn1cclxuXHJcbkBrZXlmcmFtZXMgZmFkZUluIHtcclxuICBmcm9tIHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgfVxyXG4gIHRvIHtcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgfVxyXG59IiwiJGJhc2Utc2l6ZTogMTg7XHJcblxyXG5AbWl4aW4gcHh0b2VtKCRwcm9wZXJ0eSwgJHZhbCwgJGJhc2Utc2l6ZSkge1xyXG4gICN7JHByb3BlcnR5fTogKCR2YWwgLyAkYmFzZS1zaXplKSArIDBlbVxyXG59XHJcblxyXG5AZnVuY3Rpb24gc3RyaXAtdW5pdCgkdmFsdWUpIHtcclxuICBAcmV0dXJuICR2YWx1ZSAvICgkdmFsdWUgKiAwICsgMSk7XHJcbn1cclxuXHJcbkBtaXhpbiBmbHVpZC10eXBlKCRtaW4tdncsICRtYXgtdncsICRtaW4tZm9udC1zaXplLCAkbWF4LWZvbnQtc2l6ZSkge1xyXG4gICR1MTogdW5pdCgkbWluLXZ3KTtcclxuICAkdTI6IHVuaXQoJG1heC12dyk7XHJcbiAgJHUzOiB1bml0KCRtaW4tZm9udC1zaXplKTtcclxuICAkdTQ6IHVuaXQoJG1heC1mb250LXNpemUpO1xyXG5cclxuICBAaWYgJHUxID09ICR1MiBhbmQgJHUxID09ICR1MyBhbmQgJHUxID09ICR1NCB7XHJcbiAgICAmIHtcclxuICAgICAgZm9udC1zaXplOiAkbWluLWZvbnQtc2l6ZTtcclxuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJG1pbi12dykge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogY2FsYygjeyRtaW4tZm9udC1zaXplfSArICN7c3RyaXAtdW5pdCgkbWF4LWZvbnQtc2l6ZSAtICRtaW4tZm9udC1zaXplKX0gKiAoKDEwMHZ3IC0gI3skbWluLXZ3fSkgLyAje3N0cmlwLXVuaXQoJG1heC12dyAtICRtaW4tdncpfSkpO1xyXG4gICAgICB9XHJcbiAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRtYXgtdncpIHtcclxuICAgICAgICBmb250LXNpemU6ICRtYXgtZm9udC1zaXplO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AZnVuY3Rpb24gZGVjaW1hbC1yb3VuZCAoJG51bWJlciwgJGRpZ2l0czogMCwgJG1vZGU6IHJvdW5kKSB7XHJcbiAgJG46IDE7XHJcbiAgLy8gJG51bWJlciBtdXN0IGJlIGEgbnVtYmVyXHJcbiAgQGlmIHR5cGUtb2YoJG51bWJlcikgIT0gbnVtYmVyIHtcclxuICAgIEB3YXJuICcjeyAkbnVtYmVyIH0gaXMgbm90IGEgbnVtYmVyLic7XHJcbiAgICBAcmV0dXJuICRudW1iZXI7XHJcbiAgfVxyXG4gIC8vICRkaWdpdHMgbXVzdCBiZSBhIHVuaXRsZXNzIG51bWJlclxyXG4gIEBpZiB0eXBlLW9mKCRkaWdpdHMpICE9IG51bWJlciB7XHJcbiAgICBAd2FybiAnI3sgJGRpZ2l0cyB9IGlzIG5vdCBhIG51bWJlci4nO1xyXG4gICAgQHJldHVybiAkbnVtYmVyO1xyXG4gIH0gQGVsc2UgaWYgbm90IHVuaXRsZXNzKCRkaWdpdHMpIHtcclxuICAgIEB3YXJuICcjeyAkZGlnaXRzIH0gaGFzIGEgdW5pdC4nO1xyXG4gICAgQHJldHVybiAkbnVtYmVyO1xyXG4gIH1cclxuICBAaWYgJGRpZ2l0cyA+IDAge1xyXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkZGlnaXRzIHtcclxuICAgICAgJG46ICRuICogMTA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBpZiAkbW9kZSA9PSByb3VuZCB7XHJcbiAgICBAcmV0dXJuIHJvdW5kKCRudW1iZXIgKiAkbikgLyAkbjtcclxuICB9IEBlbHNlIGlmICRtb2RlID09IGNlaWwge1xyXG4gICAgQHJldHVybiBjZWlsKCRudW1iZXIgKiAkbikgLyAkbjtcclxuICB9IEBlbHNlIGlmICRtb2RlID09IGZsb29yIHtcclxuICAgIEByZXR1cm4gZmxvb3IoJG51bWJlciAqICRuKSAvICRuO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQHdhcm4gJyN7ICRtb2RlIH0gaXMgdW5kZWZpbmVkIGtleXdvcmQuJztcclxuICAgIEByZXR1cm4gJG51bWJlcjtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBweHRvZW1Sb3VuZCgkcHJvcGVydHksICR2YWwsICRiYXNlLXNpemUpIHtcclxuICAjeyRwcm9wZXJ0eX06IGRlY2ltYWwtcm91bmQoKCR2YWwgLyAkYmFzZS1zaXplKSkgKyAwZW07XHJcbn0iLCIuaGVhZGVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB6LWluZGV4OiA1O1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIHBhZGRpbmctdG9wOiA0LjV2aDtcclxuXHJcbiAgJl9fbG9nbyB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi1yaWdodDogNDBweDtcclxuXHJcbiAgICAubG9nby1yZWQge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG5cclxuICAgIGltZyB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJl9fbmF2IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcblxyXG4gICAgJl9fdWwge1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgICBwYWRkaW5nOiAwIDIwcHggMCAwO1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuXHJcbiAgICAmX19pdGVtIHtcclxuICAgICAgQGluY2x1ZGUgcHh0b2VtKG1hcmdpbi1yaWdodCwgNSwgJGJhc2Utc2l6ZSk7XHJcbiAgICAgIEBpbmNsdWRlIHB4dG9lbShtYXJnaW4tbGVmdCwgNSwgJGJhc2Utc2l6ZSk7XHJcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2xpbmsge1xyXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgY29sb3I6ICR3aGl0ZTtcclxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0oZm9udC1zaXplLCAxNCwgJGJhc2Utc2l6ZSk7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjI7XHJcbiAgICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLXJpZ2h0LCA1LCAkYmFzZS1zaXplKTtcclxuICAgICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctbGVmdCwgNSwgJGJhc2Utc2l6ZSk7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgIHRyYW5zaXRpb246IGZvbnQtd2VpZ2h0IC40cztcclxuXHJcbiAgICAgIC5uby10b3VjaCAmIHtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS10ZXh0KSAvIFwiXCI7XHJcbiAgICAgICAgICBoZWlnaHQ6IDA7XHJcbiAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJl9fcmlnaHQge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICAmX19wZGYsICZfX3Bob25lLCAmX19sYW5nIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShmb250LXNpemUsIDE0LCAkYmFzZS1zaXplKTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLXJpZ2h0LCA1LCAkYmFzZS1zaXplKTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLWxlZnQsIDUsICRiYXNlLXNpemUpO1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbiAgICBjb2xvcjogJHJlZDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gICZfX3BkZiB7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLWxlZnQsIDQ1LCAkYmFzZS1zaXplKTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShtYXJnaW4tcmlnaHQsIDIwLCAkYmFzZS1zaXplKTtcclxuXHJcbiAgICBzcGFuIHtcclxuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgICB0cmFuc2l0aW9uOiBib3JkZXItYm90dG9tLWNvbG9yIC40cztcclxuICAgIH1cclxuXHJcbiAgICBzdmcge1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0od2lkdGgsIDE2LCAkYmFzZS1zaXplKTtcclxuICAgICAgQGluY2x1ZGUgcHh0b2VtKGhlaWdodCwgMjAsICRiYXNlLXNpemUpO1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLXJpZ2h0LCAxMiwgJGJhc2Utc2l6ZSk7XHJcbiAgICAgIGZpbGw6ICRyZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLm5vLXRvdWNoICYge1xyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRyZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19waG9uZSB7XHJcbiAgICBzdmcge1xyXG4gICAgICBmaWxsOiAkcmVkO1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0od2lkdGgsIDE2LCAkYmFzZS1zaXplKTtcclxuICAgICAgQGluY2x1ZGUgcHh0b2VtKGhlaWdodCwgMTYsICRiYXNlLXNpemUpO1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLXJpZ2h0LCAxMiwgJGJhc2Utc2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19sYW5nIHtcclxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gIH1cclxuXHJcbiAgJi5maXhlZCB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuNHM7XHJcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI0Y1RjVGNTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLXRvcCwgMjUsICRiYXNlLXNpemUpO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctYm90dG9tLCAxNSwgJGJhc2Utc2l6ZSk7XHJcblxyXG4gICAgLmhlYWRlciB7XHJcbiAgICAgICZfX2xvZ28ge1xyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG5cclxuICAgICAgICAgICYubG9nby1yZWQge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICZfX25hdiB7XHJcbiAgICAgICAgJl9fbGluayB7XHJcbiAgICAgICAgICBjb2xvcjogJGJsYWNrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJi5vcGFjaXR5IHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNjgwcHgpIHtcclxuICAgIHBhZGRpbmctdG9wOiAzOHB4O1xyXG4gICAgJl9fbG9nbyB7XHJcbiAgICAgIG1heC13aWR0aDogMjUwcHg7XHJcbiAgICB9XHJcbiAgICAmX19uYXYge1xyXG4gICAgICAmX191bCB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICZfX2l0ZW0ge1xyXG4gICAgICAgIG1hcmdpbjogMCA1cHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICZfX2xpbmsge1xyXG4gICAgICAgIHBhZGRpbmc6IDAgNXB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19wZGYge1xyXG4gICAgICBtYXJnaW4tbGVmdDogNDVweDtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xyXG5cclxuICAgICAgc3ZnIHtcclxuICAgICAgICB3aWR0aDogMTZweDtcclxuICAgICAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICZfX3Bob25lIHtcclxuICAgICAgc3ZnIHtcclxuICAgICAgICB3aWR0aDogMTZweDtcclxuICAgICAgICBoZWlnaHQ6IDE2cHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICYuZml4ZWQge1xyXG4gICAgICBwYWRkaW5nLXRvcDogMzBweDtcclxuICAgICAgcGFkZGluZy1ib3R0b206IDE1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEyNTBweCkge1xyXG4gICAgJi5maXhlZCB7XHJcbiAgICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgJl9fbG9nbyB7XHJcbiAgICAgIG1heC13aWR0aDogMjAwcHg7XHJcbiAgICB9XHJcbiAgICAmX19uYXYge1xyXG4gICAgICAmX191bCB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgICZfX2xvZ28ge1xyXG4gICAgICBtaW4td2lkdGg6IDE1MHB4O1xyXG4gICAgfVxyXG4gICAgJl9fcGRmIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgICZfX3Bob25lLCAmX19sYW5nIHtcclxuICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICBjb2xvcjogJHdoaXRlO1xyXG5cclxuICAgICAgc3ZnIHtcclxuICAgICAgICBmaWxsOiAkd2hpdGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICYuZml4ZWQge1xyXG4gICAgICAuaGVhZGVyIHtcclxuICAgICAgICAmX19sb2dvIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19yaWdodCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3Bob25lLCAmX19sYW5nIHtcclxuICAgICAgICAgIGNvbG9yOiAkcmVkO1xyXG5cclxuICAgICAgICAgIHN2ZyB7XHJcbiAgICAgICAgICAgIGZpbGw6ICRyZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU3NnB4KSB7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICAmX19yaWdodCB7XHJcbiAgICAgIHBhZGRpbmctdG9wOiAzMHB4O1xyXG4gICAgfVxyXG4gICAgJl9fbG9nbyB7XHJcbiAgICAgIG1heC13aWR0aDogMjcwcHg7XHJcbiAgICAgIHdpZHRoOiAxMDAlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuIiwiLmludHJvIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtd3JhcDogd3JhcDtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBAaW5jbHVkZSBweHRvZW0obWluLWhlaWdodCwgNjUwLCAkYmFzZS1zaXplKTtcclxuXHJcbiAgJl9faW5mbyB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMjV2aDtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBjb2xvcjogJHdoaXRlO1xyXG5cclxuICAgICZfX3ZpZGVvIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgdG9wOiAwO1xyXG4gICAgICBsZWZ0OiAwO1xyXG4gICAgICBib3R0b206IDA7XHJcbiAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi92aWRlby92aWRlb190aHVtYm5haWwuanBnXCIpO1xyXG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG5cclxuICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICByaWdodDogMDtcclxuICAgICAgICB6LWluZGV4OiAxO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoI0VDMjAyOCwgLjg3KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmlkZW8ge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDA7XHJcbiAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19zdWJ0aXRsZSB7XHJcbiAgICBwYWRkaW5nLXRvcDogNXZoO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKGZvbnQtc2l6ZSwgMjQsICRiYXNlLXNpemUpO1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcclxuICB9XHJcblxyXG4gICZfX2Zvcm0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMHZoO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctbGVmdCwgNTAsICRiYXNlLXNpemUpO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctcmlnaHQsIDE0NiwgJGJhc2Utc2l6ZSk7XHJcbiAgfVxyXG59XHJcblxyXG4uYXJyb3ctbmV4dCB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHotaW5kZXg6IDEwO1xyXG4gIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLXRvcCwgMTAsICRiYXNlLXNpemUpO1xyXG4gIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLWJvdHRvbSwgMTAsICRiYXNlLXNpemUpO1xyXG4gIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLWxlZnQsIDEwLCAkYmFzZS1zaXplKTtcclxuICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1yaWdodCwgMTAsICRiYXNlLXNpemUpO1xyXG4gIEBpbmNsdWRlIHB4dG9lbShsZWZ0LCA2MCwgJGJhc2Utc2l6ZSk7XHJcbiAgQGluY2x1ZGUgcHh0b2VtKGJvdHRvbSwgMzAsICRiYXNlLXNpemUpO1xyXG5cclxuICBzdmcge1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHdpZHRoLCAxOSwgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0oaGVpZ2h0LCAxMSwgJGJhc2Utc2l6ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTY4MHB4KSB7XHJcbiAgLmludHJvIHtcclxuICAgICZfX2luZm8ge1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTI4cHg7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fZm9ybSB7XHJcbiAgICAgIHBhZGRpbmc6IDAgMTQ2cHggNTFweCA1MHB4O1xyXG4gICAgfVxyXG5cclxuICAgICZfX3N1YnRpdGxlIHtcclxuICAgICAgcGFkZGluZy10b3A6IDMzcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC5hcnJvdy1uZXh0IHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBsZWZ0OiA2NXB4O1xyXG4gICAgYm90dG9tOiAxOHB4O1xyXG5cclxuICAgIHN2ZyB7XHJcbiAgICAgIHdpZHRoOiAxN3B4O1xyXG4gICAgICBoZWlnaHQ6IDEwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAuaW50cm8ge1xyXG4gICAgJl9fZm9ybSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gIC5pbnRybyB7XHJcbiAgICAmX19pbmZvIHtcclxuICAgICAgJl9fdmlkZW8ge1xyXG4gICAgICAgIHZpZGVvIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuIiwiaW5wdXQge1xyXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMDtcclxuXHJcbiAgJjpmb2N1cyB7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gIH1cclxufVxyXG5cclxuQC13ZWJraXQta2V5ZnJhbWVzIGF1dG9maWxsIHtcclxuICB0byB7XHJcbiAgICBjb2xvcjogaW5oZXJpdDtcclxuICAgIGJhY2tncm91bmQ6ICR3aGl0ZTtcclxuICB9XHJcbn1cclxuXHJcbmlucHV0Oi13ZWJraXQtYXV0b2ZpbGwge1xyXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGF1dG9maWxsO1xyXG4gIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxufVxyXG5cclxuYnV0dG9uLCBpbnB1dCwgb3B0Z3JvdXAsIHNlbGVjdCwgdGV4dGFyZWEge1xyXG4gIGZvbnQtZmFtaWx5OiAkSGVsdmV0aWNhO1xyXG59XHJcblxyXG4uZm9ybSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4gIHdpZHRoOiA5MCU7XHJcblxyXG4gICZfX2dyb3VwIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuXHJcbiAgJl9fdGl0bGUge1xyXG4gICAgcGFkZGluZy1ib3R0b206IDV2aDtcclxuICB9XHJcblxyXG4gICZfX2xhYmVsIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLWJvdHRvbSwgNSwgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0oZm9udC1zaXplLCAxNCwgJGJhc2Utc2l6ZSk7XHJcbiAgICBsaW5lLWhlaWdodDogMS4yO1xyXG4gIH1cclxuXHJcbiAgJl9faW5wdXQge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKGZvbnQtc2l6ZSwgMTQsICRiYXNlLXNpemUpO1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuMjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctdG9wLCAxMCwgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1ib3R0b20sIDEwLCAkYmFzZS1zaXplKTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShtYXJnaW4tYm90dG9tLCAzMCwgJGJhc2Utc2l6ZSk7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgJGdyYXk7XHJcblxyXG4gICAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XHJcbiAgICAgIGNvbG9yOiAkZ3JheTtcclxuICAgIH1cclxuXHJcbiAgICAmOjotbW96LXBsYWNlaG9sZGVyIHtcclxuICAgICAgY29sb3I6ICRncmF5O1xyXG4gICAgfVxyXG5cclxuICAgICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcclxuICAgICAgY29sb3I6ICRncmF5O1xyXG4gICAgfVxyXG5cclxuICAgICY6LW1vei1wbGFjZWhvbGRlciB7XHJcbiAgICAgIGNvbG9yOiAkZ3JheTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICZfX2J0biB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIG1pbi1oZWlnaHQ6IDQ3cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcmVkO1xyXG4gICAgY29sb3I6ICR3aGl0ZTtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDIlO1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICAgIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgICBmb250LXdlaWdodDogODAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDE7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLXRvcCwgMTAsICRiYXNlLXNpemUpO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctdG9wLCAxNSwgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1ib3R0b20sIDE1LCAkYmFzZS1zaXplKTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLWxlZnQsIDMwLCAkYmFzZS1zaXplKTtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLXJpZ2h0LCAzMCwgJGJhc2Utc2l6ZSk7XHJcbiAgfVxyXG5cclxuICAuZXJyb3ItbWVzc2FnZSB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKGJvdHRvbSwgMTAsICRiYXNlLXNpemUpO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGNvbG9yOiAkcmVkO1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShmb250LXNpemUsIDEyLCAkYmFzZS1zaXplKTtcclxuXHJcbiAgICAmLnZpc2libGUge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgYW5pbWF0aW9uOiBmYWRlSW4gLjRzO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTY4MHB4KSB7XHJcbiAgLmZvcm0ge1xyXG4gICAgbWF4LXdpZHRoOiAzMTRweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG5cclxuICAgICZfX3RpdGxlIHtcclxuICAgICAgcGFkZGluZy1ib3R0b206IDQwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fbGFiZWwge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2lucHV0IHtcclxuICAgICAgcGFkZGluZzogNnB4IDA7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XHJcbiAgICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcclxuICAgIH1cclxuXHJcbiAgICAmX19idG4ge1xyXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XHJcbiAgICAgIGhlaWdodDogNDdweDtcclxuICAgICAgcGFkZGluZzogMTBweCAzMXB4O1xyXG4gICAgfVxyXG4gIH1cclxufSIsIi5zbGlkZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgJl9fbGVmdCB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcclxuICAgIHBhZGRpbmctdG9wOiA0dmg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNHZoO1xyXG4gICAgei1pbmRleDogMTtcclxuXHJcbiAgICAmOmJlZm9yZSB7XHJcbiAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIGJvdHRvbTogMDtcclxuICAgICAgbGVmdDogMDtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHJlZDtcclxuICAgICAgei1pbmRleDogLTE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19yaWdodCB7XHJcbiAgICBwYWRkaW5nLXRvcDogNHZoO1xyXG5cclxuICAgICZfX2lubmVyIHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0oaGVpZ2h0LCAyODAsICRiYXNlLXNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2Fycm93cyB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB3aWR0aDogOTAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1sZWZ0LCA1MCwgJGJhc2Utc2l6ZSk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XHJcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC40cztcclxuXHJcbiAgICAmLmFjdGl2ZSB7XHJcbiAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjhzO1xyXG4gICAgfVxyXG5cclxuICAgICYucHJldi10ZXh0IHtcclxuICAgICAgb3BhY2l0eTogMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICZfX3RleHQge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShtYXJnaW4tdG9wLCAzNiwgJGJhc2Utc2l6ZSk7XHJcbiAgfVxyXG5cclxuICAmX19hcnJvd3Mge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMSU7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1yaWdodCwgNDAsICRiYXNlLXNpemUpO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctdG9wLCA0MCwgJGJhc2Utc2l6ZSk7XHJcblxyXG4gICAgJl9fcHJldiwgJl9fbmV4dCB7XHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgQGluY2x1ZGUgcHh0b2VtKHdpZHRoLCAzNiwgJGJhc2Utc2l6ZSk7XHJcblxyXG4gICAgICBzdmcge1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHRyYW5zaXRpb246IGxlZnQgLjRzO1xyXG4gICAgICAgIEBpbmNsdWRlIHB4dG9lbShoZWlnaHQsIDE2LCAkYmFzZS1zaXplKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICZfX3ByZXYge1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLXJpZ2h0LCAzMCwgJGJhc2Utc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLm5vLXRvdWNoICYge1xyXG4gICAgICAmX19wcmV2IHtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIHN2ZyB7XHJcbiAgICAgICAgICAgIGxlZnQ6IC0xMHB4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgJl9fbmV4dCB7XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBzdmcge1xyXG4gICAgICAgICAgICBsZWZ0OiAxMHB4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gICZfX2J1bGxldHMge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIEBpbmNsdWRlIHB4dG9lbShwYWRkaW5nLXRvcCwgNDAsICRiYXNlLXNpemUpO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKHBhZGRpbmctbGVmdCwgNTAsICRiYXNlLXNpemUpO1xyXG5cclxuICAgICZfX2l0ZW0ge1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIEBpbmNsdWRlIHB4dG9lbShtYXJnaW4tcmlnaHQsIDQ1LCAkYmFzZS1zaXplKTtcclxuXHJcbiAgICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAubGluZXMsIC5maWxsZWQge1xyXG4gICAgICAgIGZsZXgtc2hyaW5rOiAwO1xyXG4gICAgICAgIEBpbmNsdWRlIHB4dG9lbVJvdW5kKGhlaWdodCwgMzAsICRiYXNlLXNpemUpO1xyXG4gICAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgICAgIGZpbGw6ICRyZWQ7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuMnM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5saW5lcyB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICByaWdodDogMDtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAmLmFjdGl2ZSB7XHJcbiAgICAgICAgLmZpbGxlZCB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLmxpbmVzIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLnNsaWRlIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcblxyXG4gICAgJl9faW1nIHtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBhbmltYXRpb24tZGVsYXk6IC4zcztcclxuICAgICAgYW5pbWF0aW9uOiBuZXh0U2xpZGUgLjhzO1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW0oaGVpZ2h0LCAyODAsICRiYXNlLXNpemUpO1xyXG5cclxuICAgICAgaW1nIHtcclxuICAgICAgICBAaW5jbHVkZSBweHRvZW0obWF4LWhlaWdodCwgMjgwLCAkYmFzZS1zaXplKTtcclxuICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLnByZXYtc2xpZGUge1xyXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgIHRvcDogMDtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIHBhZGRpbmctdG9wOiA0dmg7XHJcblxyXG4gICAgICAuc2xpZGVfX2ltZyB7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBwcmV2U2xpZGUgLjhzO1xyXG4gICAgICAgIHJpZ2h0OiAxMDB2dztcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi5hY3RpdmUge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuXHJcbiAgICAgIC5zbGlkZV9faW1nIHtcclxuICAgICAgICByaWdodDogMDtcclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIHByZXZTbGlkZSB7XHJcbiAgICBmcm9tIHtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICB9XHJcbiAgICB0byB7XHJcbiAgICAgIHJpZ2h0OiAxMDB2dztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgbmV4dFNsaWRlIHtcclxuICAgIGZyb20ge1xyXG4gICAgICByaWdodDogMTAwdnc7XHJcbiAgICB9XHJcbiAgICB0byB7XHJcbiAgICAgIHJpZ2h0OiAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTY4MHB4KSB7XHJcbiAgICAmX19sZWZ0IHtcclxuICAgICAgcGFkZGluZy10b3A6IDM1cHg7XHJcbiAgICAgIHBhZGRpbmctYm90dG9tOiAyN3B4O1xyXG5cclxuICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSA4MHB4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJl9fcmlnaHQge1xyXG4gICAgICBwYWRkaW5nLXRvcDogMzVweDtcclxuXHJcbiAgICAgICZfX2lubmVyIHtcclxuICAgICAgICBoZWlnaHQ6IDI4MXB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19jb250ZW50IHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogNTBweDtcclxuICAgICAgbWF4LXdpZHRoOiA0MzdweDtcclxuICAgIH1cclxuICAgIC5zbGlkZSB7XHJcbiAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgaGVpZ2h0OiAyODFweDtcclxuICAgICAgfVxyXG5cclxuICAgICAgJi5wcmV2LXNsaWRlIHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogMzVweDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJl9fYXJyb3dzIHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICBwYWRkaW5nOiA0MHB4IDEyNXB4IDAgMDtcclxuXHJcbiAgICAgICZfX25leHQsICZfX3ByZXYge1xyXG4gICAgICAgIHN2ZyB7XHJcbiAgICAgICAgICBoZWlnaHQ6IDE5cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19idWxsZXRzIHtcclxuICAgICAgcGFkZGluZzogNDBweCAwIDAgNTBweDtcclxuXHJcbiAgICAgICZfX2l0ZW0ge1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogNDVweDtcclxuXHJcbiAgICAgICAgc3ZnIHtcclxuICAgICAgICAgIGhlaWdodDogMzFweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICAmX19idWxsZXRzIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgICZfX3JpZ2h0IHtcclxuICAgICAgJl9faW5uZXIge1xyXG4gICAgICAgIGhlaWdodDogMjUwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICZfX2NvbnRlbnQge1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICB9XHJcbiAgICAuc2xpZGUge1xyXG4gICAgICAmX19pbWcge1xyXG4gICAgICAgIGhlaWdodDogMjUwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICZfX2xlZnQge1xyXG4gICAgICB3aWR0aDogNTAlO1xyXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xyXG4gICAgfVxyXG5cclxuICAgICZfX2Fycm93cyB7XHJcbiAgICAgIHBhZGRpbmc6IDMwcHggNzBweCAwIDA7XHJcbiAgICB9XHJcbiAgICAmX19yaWdodCB7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7XHJcblxyXG4gICAgICAmX19pbm5lciB7XHJcbiAgICAgICAgaGVpZ2h0OiAxNzBweDtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIC5zbGlkZSB7XHJcbiAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgaGVpZ2h0OiAxNzBweDtcclxuXHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTc2cHgpIHtcclxuICAgICZfX2xlZnQge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgICZfX2Fycm93cyB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgICAmX19yaWdodCB7XHJcbiAgICAgIHBhZGRpbmc6IDQwcHggMjBweDtcclxuXHJcbiAgICAgICZfX2lubmVyIHtcclxuICAgICAgICBoZWlnaHQ6IDEyMHB4O1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJl9fYXJyb3dzIHtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgd2lkdGg6IDMwcHg7XHJcblxyXG4gICAgICAgIHN2ZyB7XHJcbiAgICAgICAgICBoZWlnaHQ6IDE2cHg7XHJcbiAgICAgICAgICBzdHJva2U6ICRibGFjaztcclxuICAgICAgICAgIGZpbGw6ICRibGFjaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX25leHQge1xyXG4gICAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19wcmV2IHtcclxuICAgICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19sZWZ0IHtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICB3aWR0aDogNTAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19jb250ZW50IHtcclxuICAgICAgcGFkZGluZzogMCA0MHB4O1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgbGVmdDogYXV0bztcclxuICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG1heC13aWR0aDogdW5zZXQ7XHJcbiAgICAgIHJpZ2h0OiAtMTAwdnc7XHJcblxyXG4gICAgICAmLmFjdGl2ZSB7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBuZXh0U2xpZGUgLjRzO1xyXG4gICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAmLnByZXYtdGV4dCB7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBwcmV2U2xpZGUgLjRzO1xyXG4gICAgICAgIHJpZ2h0OiAxMDB2dztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJl9fdGV4dCB7XHJcbiAgICAgIG1hcmdpbjogMTZweCAwIDA7XHJcbiAgICB9XHJcbiAgICAuc2xpZGUge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgbWF4LWhlaWdodDogdW5zZXQ7XHJcbiAgICAgICAgbWluLXdpZHRoOiAxNTRweDtcclxuICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgIGhlaWdodDogNDh2dztcclxuICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuXHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgICAgbWF4LWhlaWdodDogdW5zZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAmLnByZXYtc2xpZGUge1xyXG4gICAgICAgIHBhZGRpbmc6IDM1cHggMjRweCAyN3B4IDIycHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAa2V5ZnJhbWVzIG5leHRTbGlkZSB7XHJcbiAgICAgIGZyb20ge1xyXG4gICAgICAgIHJpZ2h0OiAtMTAwdnc7XHJcbiAgICAgIH1cclxuICAgICAgdG8ge1xyXG4gICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIiR3aGl0ZTogI2ZmZjtcclxuJHJlZDogI0VEMUMyNDtcclxuJGJsYWNrOiAjMjQyNDI0O1xyXG4kZ3JheTogI0NEQ0RDRDtcclxuXHJcbiRIZWx2ZXRpY2E6ICdIZWx2ZXRpY2EgTmV1ZScsICdBcmlhbCcsIHNhbnMtc2VyaWY7IiwiLnN1Y2Nlc3MtcG9wdXAge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgb3BhY2l0eTogMDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCR3aGl0ZSwgLjk1KTtcclxuICBwYWRkaW5nLXRvcDogNSU7XHJcbiAgcGFkZGluZy1ib3R0b206IDYlO1xyXG5cclxuICAmX19jcm9zcyB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0odG9wLCAzNywgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocmlnaHQsIDczLCAkYmFzZS1zaXplKTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBzdmcge1xyXG4gICAgICBAaW5jbHVkZSBweHRvZW1Sb3VuZCh3aWR0aCwgMzAsICRiYXNlLXNpemUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19pbm5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1sZWZ0LCAyOCwgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0ocGFkZGluZy1yaWdodCwgNTQsICRiYXNlLXNpemUpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xyXG5cclxuICAgIHN2ZyB7XHJcbiAgICAgIEBpbmNsdWRlIHB4dG9lbVJvdW5kKHdpZHRoLCA1NiwgJGJhc2Utc2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19zdWJ0aXRsZSB7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0oZm9udC1zaXplLCAyMCwgJGJhc2Utc2l6ZSk7XHJcbiAgICBAaW5jbHVkZSBweHRvZW0obWFyZ2luLXRvcCwgMjUsICRiYXNlLXNpemUpO1xyXG4gICAgQGluY2x1ZGUgcHh0b2VtKG1hcmdpbi1ib3R0b20sIDUwLCAkYmFzZS1zaXplKTtcclxuICB9XHJcblxyXG4gICYudmlzaWJsZSB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFuaW1hdGlvbjogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgei1pbmRleDogMTA7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNjgwcHgpIHtcclxuICAgIHBhZGRpbmctdG9wOiA0OHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDU1cHg7XHJcbiAgICAmX19jcm9zcyB7XHJcbiAgICAgIHRvcDogMzdweDtcclxuICAgICAgcmlnaHQ6IDc0cHg7XHJcblxyXG4gICAgICBzdmcge1xyXG4gICAgICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19pbm5lciB7XHJcbiAgICAgIG1heC13aWR0aDogNDEwcHg7XHJcbiAgICAgIG1heC1oZWlnaHQ6IDU0N3B4O1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuICAgICZfX3N1YnRpdGxlIHtcclxuICAgICAgbWFyZ2luLXRvcDogMTRweDtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMzZweDtcclxuICAgIH1cclxuICB9XHJcbn0iXX0= */
